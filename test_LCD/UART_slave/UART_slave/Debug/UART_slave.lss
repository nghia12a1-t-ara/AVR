
UART_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ed  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056d  00000000  00000000  00000819  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022e  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002eb  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002c  00000000  00000000  000012e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000130f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  64:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:
    }
}

void UART_init(long USART_BAUDRATE)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);						//Cho phép truy?n nh?n d? li?u
  6c:	2a b1       	in	r18, 0x0a	; 10
  6e:	28 61       	ori	r18, 0x18	; 24
  70:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);	//Khung truy?n 8 bit
  72:	20 b5       	in	r18, 0x20	; 32
  74:	26 68       	ori	r18, 0x86	; 134
  76:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;									//C?u hình Baudrate
  78:	dc 01       	movw	r26, r24
  7a:	cb 01       	movw	r24, r22
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	aa 1f       	adc	r26, r26
  82:	bb 1f       	adc	r27, r27
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	aa 1f       	adc	r26, r26
  8a:	bb 1f       	adc	r27, r27
  8c:	9c 01       	movw	r18, r24
  8e:	ad 01       	movw	r20, r26
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	44 1f       	adc	r20, r20
  96:	55 1f       	adc	r21, r21
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	44 1f       	adc	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	72 e1       	ldi	r23, 0x12	; 18
  a4:	8a e7       	ldi	r24, 0x7A	; 122
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 7a 00 	call	0xf4	; 0xf4 <__udivmodsi4>
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	82 0f       	add	r24, r18
  b0:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);
  b2:	da 01       	movw	r26, r20
  b4:	c9 01       	movw	r24, r18
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	a1 09       	sbc	r26, r1
  ba:	b1 09       	sbc	r27, r1
  bc:	89 2f       	mov	r24, r25
  be:	9a 2f       	mov	r25, r26
  c0:	ab 2f       	mov	r26, r27
  c2:	bb 27       	eor	r27, r27
  c4:	80 bd       	out	0x20, r24	; 32
  c6:	08 95       	ret

000000c8 <UART_RxChar>:
}

unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);
  c8:	5f 9b       	sbis	0x0b, 7	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART_RxChar>
	return(UDR);		
  cc:	8c b1       	in	r24, 0x0c	; 12
  ce:	08 95       	ret

000000d0 <main>:
void UART_init(long USART_BAUDRATE);
unsigned char UART_RxChar();

int main(void)
{
	DDRB |= (1 << 0);		//LED is OUTPUT
  d0:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= ~(1 << 0);		//LED is LOW
  d2:	c0 98       	cbi	0x18, 0	; 24
	UART_init(9600);
  d4:	60 e8       	ldi	r22, 0x80	; 128
  d6:	75 e2       	ldi	r23, 0x25	; 37
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>
	char c;
    /* Replace with your application code */
    while (1) 
    {
		c = UART_RxChar();
  e0:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_RxChar>
		if (c == '0')
  e4:	80 33       	cpi	r24, 0x30	; 48
  e6:	11 f4       	brne	.+4      	; 0xec <main+0x1c>
		{ 
			PORTB |= (1 << 0);
  e8:	c0 9a       	sbi	0x18, 0	; 24
  ea:	fa cf       	rjmp	.-12     	; 0xe0 <main+0x10>
		}
		if (c == '1')
  ec:	81 33       	cpi	r24, 0x31	; 49
  ee:	c1 f7       	brne	.-16     	; 0xe0 <main+0x10>
		{
			PORTB &= ~(1 << 0);
  f0:	c0 98       	cbi	0x18, 0	; 24
  f2:	f6 cf       	rjmp	.-20     	; 0xe0 <main+0x10>

000000f4 <__udivmodsi4>:
  f4:	a1 e2       	ldi	r26, 0x21	; 33
  f6:	1a 2e       	mov	r1, r26
  f8:	aa 1b       	sub	r26, r26
  fa:	bb 1b       	sub	r27, r27
  fc:	fd 01       	movw	r30, r26
  fe:	0d c0       	rjmp	.+26     	; 0x11a <__udivmodsi4_ep>

00000100 <__udivmodsi4_loop>:
 100:	aa 1f       	adc	r26, r26
 102:	bb 1f       	adc	r27, r27
 104:	ee 1f       	adc	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	a2 17       	cp	r26, r18
 10a:	b3 07       	cpc	r27, r19
 10c:	e4 07       	cpc	r30, r20
 10e:	f5 07       	cpc	r31, r21
 110:	20 f0       	brcs	.+8      	; 0x11a <__udivmodsi4_ep>
 112:	a2 1b       	sub	r26, r18
 114:	b3 0b       	sbc	r27, r19
 116:	e4 0b       	sbc	r30, r20
 118:	f5 0b       	sbc	r31, r21

0000011a <__udivmodsi4_ep>:
 11a:	66 1f       	adc	r22, r22
 11c:	77 1f       	adc	r23, r23
 11e:	88 1f       	adc	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	1a 94       	dec	r1
 124:	69 f7       	brne	.-38     	; 0x100 <__udivmodsi4_loop>
 126:	60 95       	com	r22
 128:	70 95       	com	r23
 12a:	80 95       	com	r24
 12c:	90 95       	com	r25
 12e:	9b 01       	movw	r18, r22
 130:	ac 01       	movw	r20, r24
 132:	bd 01       	movw	r22, r26
 134:	cf 01       	movw	r24, r30
 136:	08 95       	ret

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
