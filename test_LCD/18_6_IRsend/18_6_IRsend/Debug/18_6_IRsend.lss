
18_6_IRsend.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000230  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000230  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f26  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000682  00000000  00000000  0000132e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000082b  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  000021dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000415  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000056c  00000000  00000000  000027f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002d5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  8a:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER_ENABLE_PWM>:
		data <<= 1;
	}
	mark(NEC_BIT_MARK);
	PORTD &= ~(1 << TIMER_PWM_PIN);
	space(0);
}
  92:	8e b5       	in	r24, 0x2e	; 46
  94:	81 60       	ori	r24, 0x01	; 1
  96:	8e bd       	out	0x2e, r24	; 46
  98:	08 95       	ret

0000009a <TIMER_DISABLE_PWM>:
  9a:	8e b5       	in	r24, 0x2e	; 46
  9c:	8e 7f       	andi	r24, 0xFE	; 254
  9e:	8e bd       	out	0x2e, r24	; 46
  a0:	08 95       	ret

000000a2 <TIMER_CONFIG_KHZ>:
  a2:	9c 01       	movw	r18, r24
  a4:	9f b5       	in	r25, 0x2f	; 47
  a6:	92 6a       	ori	r25, 0xA2	; 162
  a8:	9f bd       	out	0x2f, r25	; 47
  aa:	9e b5       	in	r25, 0x2e	; 46
  ac:	98 61       	ori	r25, 0x18	; 24
  ae:	9e bd       	out	0x2e, r25	; 46
  b0:	23 32       	cpi	r18, 0x23	; 35
  b2:	31 05       	cpc	r19, r1
  b4:	49 f4       	brne	.+18     	; 0xc8 <TIMER_CONFIG_KHZ+0x26>
  b6:	89 ec       	ldi	r24, 0xC9	; 201
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	97 bd       	out	0x27, r25	; 39
  bc:	86 bd       	out	0x26, r24	; 38
  be:	88 e9       	ldi	r24, 0x98	; 152
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	99 bd       	out	0x29, r25	; 41
  c4:	88 bd       	out	0x28, r24	; 40
  c6:	18 c0       	rjmp	.+48     	; 0xf8 <TIMER_CONFIG_KHZ+0x56>
  c8:	24 32       	cpi	r18, 0x24	; 36
  ca:	31 05       	cpc	r19, r1
  cc:	49 f4       	brne	.+18     	; 0xe0 <TIMER_CONFIG_KHZ+0x3e>
  ce:	8b eb       	ldi	r24, 0xBB	; 187
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	97 bd       	out	0x27, r25	; 39
  d4:	86 bd       	out	0x26, r24	; 38
  d6:	84 e9       	ldi	r24, 0x94	; 148
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	99 bd       	out	0x29, r25	; 41
  dc:	88 bd       	out	0x28, r24	; 40
  de:	08 95       	ret
  e0:	26 32       	cpi	r18, 0x26	; 38
  e2:	31 05       	cpc	r19, r1
  e4:	49 f4       	brne	.+18     	; 0xf8 <TIMER_CONFIG_KHZ+0x56>
  e6:	84 ea       	ldi	r24, 0xA4	; 164
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	97 bd       	out	0x27, r25	; 39
  ec:	86 bd       	out	0x26, r24	; 38
  ee:	8c e8       	ldi	r24, 0x8C	; 140
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	99 bd       	out	0x29, r25	; 41
  f4:	88 bd       	out	0x28, r24	; 40
  f6:	08 95       	ret
  f8:	28 32       	cpi	r18, 0x28	; 40
  fa:	31 05       	cpc	r19, r1
  fc:	41 f4       	brne	.+16     	; 0x10e <TIMER_CONFIG_KHZ+0x6c>
  fe:	8f e8       	ldi	r24, 0x8F	; 143
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	97 bd       	out	0x27, r25	; 39
 104:	86 bd       	out	0x26, r24	; 38
 106:	85 e8       	ldi	r24, 0x85	; 133
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	99 bd       	out	0x29, r25	; 41
 10c:	88 bd       	out	0x28, r24	; 40
 10e:	08 95       	ret

00000110 <enableIROut>:
 110:	8c 9a       	sbi	0x11, 4	; 17
 112:	94 98       	cbi	0x12, 4	; 18
 114:	0e 94 51 00 	call	0xa2	; 0xa2 <TIMER_CONFIG_KHZ>
 118:	08 95       	ret

0000011a <delayMicroseconds>:
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	39 f0       	breq	.+14     	; 0x12c <delayMicroseconds+0x12>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	02 97       	sbiw	r24, 0x02	; 2
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <delayMicroseconds+0xe>
 12c:	08 95       	ret

0000012e <mark>:
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
 134:	0e 94 49 00 	call	0x92	; 0x92 <TIMER_ENABLE_PWM>
 138:	ce 01       	movw	r24, r28
 13a:	0e 94 8d 00 	call	0x11a	; 0x11a <delayMicroseconds>
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <space>:
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
 14a:	0e 94 4d 00 	call	0x9a	; 0x9a <TIMER_DISABLE_PWM>
 14e:	94 98       	cbi	0x12, 4	; 18
 150:	ce 01       	movw	r24, r28
 152:	0e 94 8d 00 	call	0x11a	; 0x11a <delayMicroseconds>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <IRsendSony>:

void IRsendSony(unsigned long data, int nbits)
{
 15c:	cf 92       	push	r12
 15e:	df 92       	push	r13
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	6b 01       	movw	r12, r22
 16e:	7c 01       	movw	r14, r24
 170:	ea 01       	movw	r28, r20
	enableIROut(40);
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 88 00 	call	0x110	; 0x110 <enableIROut>
	mark(SONY_HDR_MARK);
 17a:	80 e6       	ldi	r24, 0x60	; 96
 17c:	99 e0       	ldi	r25, 0x09	; 9
 17e:	0e 94 97 00 	call	0x12e	; 0x12e <mark>
	space(SONY_HDR_SPACE);
 182:	88 e5       	ldi	r24, 0x58	; 88
 184:	92 e0       	ldi	r25, 0x02	; 2
 186:	0e 94 a2 00 	call	0x144	; 0x144 <space>
	data = data << (32 - nbits);
 18a:	80 e2       	ldi	r24, 0x20	; 32
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	8c 1b       	sub	r24, r28
 190:	9d 0b       	sbc	r25, r29
 192:	04 c0       	rjmp	.+8      	; 0x19c <IRsendSony+0x40>
 194:	cc 0c       	add	r12, r12
 196:	dd 1c       	adc	r13, r13
 198:	ee 1c       	adc	r14, r14
 19a:	ff 1c       	adc	r15, r15
 19c:	8a 95       	dec	r24
 19e:	d2 f7       	brpl	.-12     	; 0x194 <IRsendSony+0x38>
	for (int i = 0; i < nbits; i++) {
 1a0:	1c 16       	cp	r1, r28
 1a2:	1d 06       	cpc	r1, r29
 1a4:	f4 f4       	brge	.+60     	; 0x1e2 <IRsendSony+0x86>
 1a6:	00 e0       	ldi	r16, 0x00	; 0
 1a8:	10 e0       	ldi	r17, 0x00	; 0
		if (data & TOPBIT) {
 1aa:	ff 20       	and	r15, r15
 1ac:	4c f4       	brge	.+18     	; 0x1c0 <IRsendSony+0x64>
			mark(SONY_ONE_MARK);
 1ae:	80 eb       	ldi	r24, 0xB0	; 176
 1b0:	94 e0       	ldi	r25, 0x04	; 4
 1b2:	0e 94 97 00 	call	0x12e	; 0x12e <mark>
			space(SONY_HDR_SPACE);
 1b6:	88 e5       	ldi	r24, 0x58	; 88
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	0e 94 a2 00 	call	0x144	; 0x144 <space>
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <IRsendSony+0x74>
		}
		else {
			mark(SONY_ZERO_MARK);
 1c0:	88 e5       	ldi	r24, 0x58	; 88
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	0e 94 97 00 	call	0x12e	; 0x12e <mark>
			space(SONY_HDR_SPACE);
 1c8:	88 e5       	ldi	r24, 0x58	; 88
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	0e 94 a2 00 	call	0x144	; 0x144 <space>
		}
		data <<= 1;
 1d0:	cc 0c       	add	r12, r12
 1d2:	dd 1c       	adc	r13, r13
 1d4:	ee 1c       	adc	r14, r14
 1d6:	ff 1c       	adc	r15, r15
{
	enableIROut(40);
	mark(SONY_HDR_MARK);
	space(SONY_HDR_SPACE);
	data = data << (32 - nbits);
	for (int i = 0; i < nbits; i++) {
 1d8:	0f 5f       	subi	r16, 0xFF	; 255
 1da:	1f 4f       	sbci	r17, 0xFF	; 255
 1dc:	c0 17       	cp	r28, r16
 1de:	d1 07       	cpc	r29, r17
 1e0:	21 f7       	brne	.-56     	; 0x1aa <IRsendSony+0x4e>
			mark(SONY_ZERO_MARK);
			space(SONY_HDR_SPACE);
		}
		data <<= 1;
	}
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	cf 90       	pop	r12
 1f2:	08 95       	ret

000001f4 <main>:
char j = 0;
int sec;

int main(void)
{
	DDRC = 0x00;
 1f4:	14 ba       	out	0x14, r1	; 20
	PORTC = 0x0F;
 1f6:	8f e0       	ldi	r24, 0x0F	; 15
 1f8:	85 bb       	out	0x15, r24	; 21
	DDRD |= (1 << TIMER_PWM_PIN);
 1fa:	8c 9a       	sbi	0x11, 4	; 17
	PORTD &= ~(1 << TIMER_PWM_PIN);
 1fc:	94 98       	cbi	0x12, 4	; 18
	
	GICR = 1<<INT0;					/* Enable INT0*/
 1fe:	80 e4       	ldi	r24, 0x40	; 64
 200:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00;	/* Trigger INT0 on rising edge */
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	85 bf       	out	0x35, r24	; 53
	
	sei();							/* Enable Global Interrupt */
 206:	78 94       	sei
// 		Mode_sec();
// 		j = keyfind();
// 		Kiemtra();
		if (NEC_sec)
		{
			IRsendSony(SONY_Code[0], SONY_nbits);
 208:	c0 e6       	ldi	r28, 0x60	; 96
 20a:	d0 e0       	ldi	r29, 0x00	; 0
    while (1) 
    {
// 		Mode_sec();
// 		j = keyfind();
// 		Kiemtra();
		if (NEC_sec)
 20c:	98 99       	sbic	0x13, 0	; 19
 20e:	0b c0       	rjmp	.+22     	; 0x226 <main+0x32>
		{
			IRsendSony(SONY_Code[0], SONY_nbits);
 210:	40 91 94 00 	lds	r20, 0x0094	; 0x800094 <SONY_nbits>
 214:	50 91 95 00 	lds	r21, 0x0095	; 0x800095 <SONY_nbits+0x1>
 218:	68 81       	ld	r22, Y
 21a:	79 81       	ldd	r23, Y+1	; 0x01
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	9b 81       	ldd	r25, Y+3	; 0x03
 220:	0e 94 ae 00 	call	0x15c	; 0x15c <IRsendSony>
			PORTD &= ~(1 << TIMER_PWM_PIN);
 224:	94 98       	cbi	0x12, 4	; 18
		}
		while ((PINC & (1 << 0)) == 0);
 226:	98 9b       	sbis	0x13, 0	; 19
 228:	fe cf       	rjmp	.-4      	; 0x226 <main+0x32>
 22a:	f0 cf       	rjmp	.-32     	; 0x20c <main+0x18>

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
