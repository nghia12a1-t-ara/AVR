
Hong_Ngoai.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000374  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800060  00800060  000003e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000787  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ee  00000000  00000000  00000c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037b  00000000  00000000  000011f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000384  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ad  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001d45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 36       	cpi	r26, 0x6F	; 111
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  74:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:

	return IR_SUCCESS;
}

ISR(INT0_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	6f 93       	push	r22
  90:	7f 93       	push	r23
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	af 93       	push	r26
  98:	bf 93       	push	r27
{
	uint8_t value;
	uint16_t counter;

	/* load IR counter value to local variable, then reset counter */
	counter = IR_counter;
  9a:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <IR_counter>
  9e:	50 91 6c 00 	lds	r21, 0x006C	; 0x80006c <IR_counter+0x1>
	IR_counter = 0;
  a2:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <IR_counter+0x1>
  a6:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <IR_counter>

	/* read IR_IN_PIN digital value
	(NOTE: logical inverse value = value ^ 1 due to sensor used) */
	value = (PINB & (1 << IR_IN_PIN)) > 0 ? LOW : HIGH;
  aa:	86 b3       	in	r24, 0x16	; 22
  ac:	82 70       	andi	r24, 0x02	; 2
  ae:	90 e0       	ldi	r25, 0x00	; 0

	switch(IR_event) 
  b0:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <IR_event>
  b4:	21 30       	cpi	r18, 0x01	; 1
  b6:	79 f0       	breq	.+30     	; 0xd6 <__vector_1+0x5a>
  b8:	30 f0       	brcs	.+12     	; 0xc6 <__vector_1+0x4a>
  ba:	22 30       	cpi	r18, 0x02	; 2
  bc:	09 f4       	brne	.+2      	; 0xc0 <__vector_1+0x44>
  be:	a7 c0       	rjmp	.+334    	; 0x20e <__vector_1+0x192>
  c0:	23 30       	cpi	r18, 0x03	; 3
  c2:	29 f1       	breq	.+74     	; 0x10e <__vector_1+0x92>
  c4:	aa c0       	rjmp	.+340    	; 0x21a <__vector_1+0x19e>
	{
		case IR_EVENT_IDLE:
			/* awaiting for an initial signal */
			if (value == HIGH) 
  c6:	18 16       	cp	r1, r24
  c8:	19 06       	cpc	r1, r25
  ca:	0c f4       	brge	.+2      	; 0xce <__vector_1+0x52>
  cc:	a6 c0       	rjmp	.+332    	; 0x21a <__vector_1+0x19e>
			{
				IR_event = IR_EVENT_INIT;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <IR_event>
  d4:	a2 c0       	rjmp	.+324    	; 0x21a <__vector_1+0x19e>
			}
			break;
		case IR_EVENT_INIT:
			/* consume leading pulse burst */
			if (value == LOW) 
  d6:	18 16       	cp	r1, r24
  d8:	19 06       	cpc	r1, r25
  da:	ac f4       	brge	.+42     	; 0x106 <__vector_1+0x8a>
			{
				if (counter > 655 && counter < 815) 
  dc:	40 59       	subi	r20, 0x90	; 144
  de:	52 40       	sbci	r21, 0x02	; 2
  e0:	4f 39       	cpi	r20, 0x9F	; 159
  e2:	51 05       	cpc	r21, r1
  e4:	60 f4       	brcc	.+24     	; 0xfe <__vector_1+0x82>
				{
					/* a 9ms leading pulse burst, NEC Infrared Transmission Protocol detected,
					counter = 0.009/(1.0/38222.) * 2 = 343.998 * 2 = 686 (+/- 30) */
					IR_event = IR_EVENT_PROC;
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <IR_event>
					IR_proto_event = IR_PROTO_EVENT_INIT;
  ec:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <IR_proto_event>
					IR_timeout = 7400;
  f0:	88 ee       	ldi	r24, 0xE8	; 232
  f2:	9c e1       	ldi	r25, 0x1C	; 28
  f4:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <IR_timeout+0x1>
  f8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <IR_timeout>
  fc:	8e c0       	rjmp	.+284    	; 0x21a <__vector_1+0x19e>
				}
				else 
				{
					IR_event = IR_EVENT_FINI;
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <IR_event>
 104:	8a c0       	rjmp	.+276    	; 0x21a <__vector_1+0x19e>
				}
			}
			else 
			{
				IR_event = IR_EVENT_FINI;
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <IR_event>
 10c:	86 c0       	rjmp	.+268    	; 0x21a <__vector_1+0x19e>

static int8_t IR_NEC_process(uint16_t counter, uint8_t value)
{
	int8_t retval = IR_ERROR;

	switch(IR_proto_event) 
 10e:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <IR_proto_event>
 112:	21 30       	cpi	r18, 0x01	; 1
 114:	49 f1       	breq	.+82     	; 0x168 <__vector_1+0xec>
 116:	38 f0       	brcs	.+14     	; 0x126 <__vector_1+0xaa>
 118:	22 30       	cpi	r18, 0x02	; 2
 11a:	09 f4       	brne	.+2      	; 0x11e <__vector_1+0xa2>
 11c:	64 c0       	rjmp	.+200    	; 0x1e6 <__vector_1+0x16a>
 11e:	23 30       	cpi	r18, 0x03	; 3
 120:	09 f4       	brne	.+2      	; 0x124 <__vector_1+0xa8>
 122:	5a c0       	rjmp	.+180    	; 0x1d8 <__vector_1+0x15c>
 124:	70 c0       	rjmp	.+224    	; 0x206 <__vector_1+0x18a>
	{
		case IR_PROTO_EVENT_INIT:
		/* expecting a space */
			if (value == HIGH) 
 126:	18 16       	cp	r1, r24
 128:	19 06       	cpc	r1, r25
 12a:	0c f4       	brge	.+2      	; 0x12e <__vector_1+0xb2>
 12c:	6c c0       	rjmp	.+216    	; 0x206 <__vector_1+0x18a>
			{
				if (counter > 330 && counter < 360) 
 12e:	ca 01       	movw	r24, r20
 130:	8b 54       	subi	r24, 0x4B	; 75
 132:	91 40       	sbci	r25, 0x01	; 1
 134:	4d 97       	sbiw	r24, 0x1d	; 29
 136:	70 f4       	brcc	.+28     	; 0x154 <__vector_1+0xd8>
				{
				/* a 4.5ms space for regular transmition of NEC Code;
				counter => 0.0045/(1.0/38222.0) * 2 = 344 (+/- 15) */
					IR_proto_event = IR_PROTO_EVENT_DATA;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <IR_proto_event>
					IR_data = IR_index = 0;
 13e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <IR_index>
 142:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 146:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 14e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 152:	63 c0       	rjmp	.+198    	; 0x21a <__vector_1+0x19e>
					retval = IR_SUCCESS;
				} 
				else if (counter > 155 && counter < 185) 
 154:	4c 59       	subi	r20, 0x9C	; 156
 156:	51 09       	sbc	r21, r1
 158:	4d 31       	cpi	r20, 0x1D	; 29
 15a:	51 05       	cpc	r21, r1
 15c:	08 f0       	brcs	.+2      	; 0x160 <__vector_1+0xe4>
 15e:	53 c0       	rjmp	.+166    	; 0x206 <__vector_1+0x18a>
				{
					/* a 2.25ms space for NEC Code repeat;
					counter => 0.00225/(1.0/38222.0) * 2 = 172 (+/- 15) */
					IR_proto_event = IR_PROTO_EVENT_FINI;
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <IR_proto_event>
 166:	59 c0       	rjmp	.+178    	; 0x21a <__vector_1+0x19e>
			4) the 8-bit logical inverse of the command
			Logical '0' – a 562.5µs pulse burst followed by a 562.5µs
			(<90 IR counter cycles) space, with a total transmit time of 1.125ms
			Logical '1' – a 562.5µs pulse burst followed by a 1.6875ms
			(>=90 IR counter cycles) space, with a total transmit time of 2.25ms */
			if (IR_index < 32) 
 168:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <IR_index>
 16c:	20 32       	cpi	r18, 0x20	; 32
 16e:	08 f0       	brcs	.+2      	; 0x172 <__vector_1+0xf6>
 170:	4a c0       	rjmp	.+148    	; 0x206 <__vector_1+0x18a>
			{
				if (value == HIGH) 
 172:	18 16       	cp	r1, r24
 174:	19 06       	cpc	r1, r25
 176:	0c f4       	brge	.+2      	; 0x17a <__vector_1+0xfe>
 178:	50 c0       	rjmp	.+160    	; 0x21a <__vector_1+0x19e>
				{
					IR_data |= ((uint32_t)((counter < 90) ? 0 : 1) << IR_index++);
 17a:	31 e0       	ldi	r19, 0x01	; 1
 17c:	32 0f       	add	r19, r18
 17e:	30 93 64 00 	sts	0x0064, r19	; 0x800064 <IR_index>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	4a 35       	cpi	r20, 0x5A	; 90
 18c:	51 05       	cpc	r21, r1
 18e:	18 f4       	brcc	.+6      	; 0x196 <__vector_1+0x11a>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	dc 01       	movw	r26, r24
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <__vector_1+0x124>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	aa 1f       	adc	r26, r26
 19e:	bb 1f       	adc	r27, r27
 1a0:	2a 95       	dec	r18
 1a2:	d2 f7       	brpl	.-12     	; 0x198 <__vector_1+0x11c>
 1a4:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a8:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ac:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1b0:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1b4:	84 2b       	or	r24, r20
 1b6:	95 2b       	or	r25, r21
 1b8:	a6 2b       	or	r26, r22
 1ba:	b7 2b       	or	r27, r23
 1bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1c4:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1c8:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
					if (IR_index == 32) 
 1cc:	30 32       	cpi	r19, 0x20	; 32
 1ce:	29 f5       	brne	.+74     	; 0x21a <__vector_1+0x19e>
					{
						IR_proto_event = IR_PROTO_EVENT_HOOK;
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <IR_proto_event>
 1d6:	21 c0       	rjmp	.+66     	; 0x21a <__vector_1+0x19e>
			}
			break;
		case IR_PROTO_EVENT_HOOK:
		/* expecting a final 562.5µs pulse burst to
		signify the end of message transmission */
			if (value == LOW) 
 1d8:	18 16       	cp	r1, r24
 1da:	19 06       	cpc	r1, r25
 1dc:	a4 f4       	brge	.+40     	; 0x206 <__vector_1+0x18a>
			{
				IR_proto_event = IR_PROTO_EVENT_FINI;
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <IR_proto_event>
 1e4:	1a c0       	rjmp	.+52     	; 0x21a <__vector_1+0x19e>
				retval = IR_SUCCESS;
			}
			break;
		case IR_PROTO_EVENT_FINI:
			/* copying data to volatile variable; raw data is ready */
			IR_rawdata = IR_data;
 1e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ea:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ee:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1f2:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1f6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <IR_rawdata>
 1fa:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <IR_rawdata+0x1>
 1fe:	a0 93 69 00 	sts	0x0069, r26	; 0x800069 <IR_rawdata+0x2>
 202:	b0 93 6a 00 	sts	0x006A, r27	; 0x80006a <IR_rawdata+0x3>
			break;
		case IR_EVENT_PROC:
			/* read and decode NEC Protocol data */
			if (IR_NEC_process(counter, value))
			{
				IR_event = IR_EVENT_FINI;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <IR_event>
 20c:	06 c0       	rjmp	.+12     	; 0x21a <__vector_1+0x19e>
			}
			break;
		case IR_EVENT_FINI:
			/* clear timeout and set idle mode */
			IR_event = IR_EVENT_IDLE;
 20e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <IR_event>
			IR_timeout = 0;
 212:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <IR_timeout+0x1>
 216:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <IR_timeout>
}

ISR(INT0_vect)
{
	IR_process();
}
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
	/* When transmitting or receiving remote control codes using
	the NEC IR transmission protocol, the communications performs
	optimally when the carrier frequency (used for modulation/demodulation)
	is set to 38.222kHz. */
	if (IR_counter++ > 10000)
 24a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <IR_counter>
 24e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <IR_counter+0x1>
 252:	9c 01       	movw	r18, r24
 254:	2f 5f       	subi	r18, 0xFF	; 255
 256:	3f 4f       	sbci	r19, 0xFF	; 255
 258:	30 93 6c 00 	sts	0x006C, r19	; 0x80006c <IR_counter+0x1>
 25c:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <IR_counter>
 260:	81 31       	cpi	r24, 0x11	; 17
 262:	97 42       	sbci	r25, 0x27	; 39
 264:	10 f0       	brcs	.+4      	; 0x26a <__vector_7+0x32>
	IR_event = IR_EVENT_IDLE;
 266:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <IR_event>
	if (IR_timeout && --IR_timeout == 0)
 26a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <IR_timeout>
 26e:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <IR_timeout+0x1>
 272:	89 2b       	or	r24, r25
 274:	69 f0       	breq	.+26     	; 0x290 <__vector_7+0x58>
 276:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <IR_timeout>
 27a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <IR_timeout+0x1>
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <IR_timeout+0x1>
 284:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <IR_timeout>
 288:	89 2b       	or	r24, r25
 28a:	11 f4       	brne	.+4      	; 0x290 <__vector_7+0x58>
	IR_event = IR_EVENT_IDLE;
 28c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <IR_event>
}
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <main>:
int main(void)
{
	uint8_t addr, cmd;

	/* setup */
	DDRB |= (1 << LED1_PIN) | (1 << LED2_PIN) | (1 << LED3_PIN) | (1 << LED4_PIN);
 2a2:	87 b3       	in	r24, 0x17	; 23
 2a4:	8d 61       	ori	r24, 0x1D	; 29
 2a6:	87 bb       	out	0x17, r24	; 23
uint8_t IR_index = 0;
uint32_t IR_data = 0;

static void IR_init()
{
	DDRB &= ~(1 << IR_IN_PIN); // set IR IN pin as INPUT
 2a8:	b9 98       	cbi	0x17, 1	; 23
	PORTB &= ~(1 << IR_IN_PIN); // set LOW level to IR IN pin
 2aa:	c1 98       	cbi	0x18, 1	; 24
	/*TCCR1A |= (1 << WGM01); // set timer counter mode to CTC*/
	/*TCCR1B |= (1 << CS00); // set prescaler to 1*/
	TCCR1A |= (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
 2ac:	8f b5       	in	r24, 0x2f	; 47
 2ae:	82 6a       	ori	r24, 0xA2	; 162
 2b0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS10);
 2b2:	8e b5       	in	r24, 0x2e	; 46
 2b4:	89 61       	ori	r24, 0x19	; 25
 2b6:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE0); // enable Timer COMPA interrupt
 2b8:	89 b7       	in	r24, 0x39	; 57
 2ba:	82 60       	ori	r24, 0x02	; 2
 2bc:	89 bf       	out	0x39, r24	; 57
	OCR0 = IR_OCR0A; // set OCR0n to get ~38.222kHz timer frequency
 2be:	8a e7       	ldi	r24, 0x7A	; 122
 2c0:	8c bf       	out	0x3c, r24	; 60
	GICR = 1<<INT0;	 // enable INT0 interrupt handler
 2c2:	80 e4       	ldi	r24, 0x40	; 64
 2c4:	8b bf       	out	0x3b, r24	; 59
	MCUCR &= ~(1 << ISC01); // trigger INTO interrupt on raising
 2c6:	85 b7       	in	r24, 0x35	; 53
 2c8:	8d 7f       	andi	r24, 0xFD	; 253
 2ca:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC00); // and falling edge
 2cc:	85 b7       	in	r24, 0x35	; 53
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	85 bf       	out	0x35, r24	; 53
	sei(); // enable global interrupts
 2d2:	78 94       	sei
				break;
				case 0x06:
				PORTB ^= (1 << LED3_PIN); // toggle LED3
				break;
				case 0x04:
				PORTB ^= _BV(LED4_PIN); // toggle LED4
 2d4:	f0 e1       	ldi	r31, 0x10	; 16
				break;
				case 0x07:
				PORTB ^= (1 << LED2_PIN); // toggle LED2
				break;
				case 0x06:
				PORTB ^= (1 << LED3_PIN); // toggle LED3
 2d6:	e8 e0       	ldi	r30, 0x08	; 8
				break;
				case 0x00:
				PORTB ^= (1 << LED1_PIN); // toggle LED1
				break;
				case 0x07:
				PORTB ^= (1 << LED2_PIN); // toggle LED2
 2d8:	34 e0       	ldi	r19, 0x04	; 4
				case 0x01:
				/* turn all LEDs off */
				PORTB &= ~((1 << LED1_PIN) | (1 << LED2_PIN) | (1 << LED3_PIN) | (1 << LED4_PIN));
				break;
				case 0x00:
				PORTB ^= (1 << LED1_PIN); // toggle LED1
 2da:	21 e0       	ldi	r18, 0x01	; 1

}

static int8_t IR_read(uint8_t *address, uint8_t *command)
{
	if (!IR_rawdata)
 2dc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <IR_rawdata>
 2e0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <IR_rawdata+0x1>
 2e4:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <IR_rawdata+0x2>
 2e8:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <IR_rawdata+0x3>
 2ec:	89 2b       	or	r24, r25
 2ee:	8a 2b       	or	r24, r26
 2f0:	8b 2b       	or	r24, r27
 2f2:	a1 f3       	breq	.-24     	; 0x2dc <main+0x3a>
	return IR_ERROR;

	*address = IR_rawdata;
 2f4:	40 91 67 00 	lds	r20, 0x0067	; 0x800067 <IR_rawdata>
 2f8:	50 91 68 00 	lds	r21, 0x0068	; 0x800068 <IR_rawdata+0x1>
 2fc:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <IR_rawdata+0x2>
 300:	70 91 6a 00 	lds	r23, 0x006A	; 0x80006a <IR_rawdata+0x3>
	*command = IR_rawdata >> 16;
 304:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <IR_rawdata>
 308:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <IR_rawdata+0x1>
 30c:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <IR_rawdata+0x2>
 310:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <IR_rawdata+0x3>
	IR_rawdata = 0;
 314:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <IR_rawdata>
 318:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <IR_rawdata+0x1>
 31c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <IR_rawdata+0x2>
 320:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <IR_rawdata+0x3>
	/* loop */
	while (1) 
	{
		if (IR_read(&addr, &cmd) == IR_SUCCESS) 
		{
			if (addr != 0x01)
 324:	41 30       	cpi	r20, 0x01	; 1
 326:	d1 f6       	brne	.-76     	; 0x2dc <main+0x3a>
			continue;
			switch(cmd) 
 328:	cd 01       	movw	r24, r26
 32a:	aa 27       	eor	r26, r26
 32c:	bb 27       	eor	r27, r27
 32e:	84 30       	cpi	r24, 0x04	; 4
 330:	d9 f0       	breq	.+54     	; 0x368 <main+0xc6>
 332:	28 f4       	brcc	.+10     	; 0x33e <main+0x9c>
 334:	88 23       	and	r24, r24
 336:	61 f0       	breq	.+24     	; 0x350 <main+0xae>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	31 f0       	breq	.+12     	; 0x348 <main+0xa6>
 33c:	cf cf       	rjmp	.-98     	; 0x2dc <main+0x3a>
 33e:	86 30       	cpi	r24, 0x06	; 6
 340:	79 f0       	breq	.+30     	; 0x360 <main+0xbe>
 342:	87 30       	cpi	r24, 0x07	; 7
 344:	49 f0       	breq	.+18     	; 0x358 <main+0xb6>
 346:	ca cf       	rjmp	.-108    	; 0x2dc <main+0x3a>
			{
				case 0x01:
				/* turn all LEDs off */
				PORTB &= ~((1 << LED1_PIN) | (1 << LED2_PIN) | (1 << LED3_PIN) | (1 << LED4_PIN));
 348:	88 b3       	in	r24, 0x18	; 24
 34a:	82 7e       	andi	r24, 0xE2	; 226
 34c:	88 bb       	out	0x18, r24	; 24
				break;
 34e:	c6 cf       	rjmp	.-116    	; 0x2dc <main+0x3a>
				case 0x00:
				PORTB ^= (1 << LED1_PIN); // toggle LED1
 350:	88 b3       	in	r24, 0x18	; 24
 352:	82 27       	eor	r24, r18
 354:	88 bb       	out	0x18, r24	; 24
				break;
 356:	c2 cf       	rjmp	.-124    	; 0x2dc <main+0x3a>
				case 0x07:
				PORTB ^= (1 << LED2_PIN); // toggle LED2
 358:	88 b3       	in	r24, 0x18	; 24
 35a:	83 27       	eor	r24, r19
 35c:	88 bb       	out	0x18, r24	; 24
				break;
 35e:	be cf       	rjmp	.-132    	; 0x2dc <main+0x3a>
				case 0x06:
				PORTB ^= (1 << LED3_PIN); // toggle LED3
 360:	88 b3       	in	r24, 0x18	; 24
 362:	8e 27       	eor	r24, r30
 364:	88 bb       	out	0x18, r24	; 24
				break;
 366:	ba cf       	rjmp	.-140    	; 0x2dc <main+0x3a>
				case 0x04:
				PORTB ^= _BV(LED4_PIN); // toggle LED4
 368:	88 b3       	in	r24, 0x18	; 24
 36a:	8f 27       	eor	r24, r31
 36c:	88 bb       	out	0x18, r24	; 24
				break;
 36e:	b6 cf       	rjmp	.-148    	; 0x2dc <main+0x3a>

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
