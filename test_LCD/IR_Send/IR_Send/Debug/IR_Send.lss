
IR_Send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000004d2  00000566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800070  00800070  00000576  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9c  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e7  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000782  00000000  00000000  00001def  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00002574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a4  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e9  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002fdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_11>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	fa 01       	movw	r30, r20
  56:	1d 01       	movw	r2, r26
  58:	1d 01       	movw	r2, r26
  5a:	1d 01       	movw	r2, r26
  5c:	1d 01       	movw	r2, r26
  5e:	1d 01       	movw	r2, r26
  60:	1d 01       	movw	r2, r26
  62:	e7 01       	movw	r28, r14
  64:	1d 01       	movw	r2, r26
  66:	1d 01       	movw	r2, r26
  68:	1d 01       	movw	r2, r26
  6a:	1d 01       	movw	r2, r26
  6c:	1d 01       	movw	r2, r26
  6e:	d4 01       	movw	r26, r8
  70:	29 01       	movw	r4, r18
  72:	3c 01       	movw	r6, r24
  74:	4f 01       	movw	r8, r30
  76:	62 01       	movw	r12, r4
  78:	75 01       	movw	r14, r10
  7a:	88 01       	movw	r16, r16
  7c:	9b 01       	movw	r18, r22
  7e:	ae 01       	movw	r20, r28
  80:	c1 01       	movw	r24, r2

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf e5       	ldi	r28, 0x5F	; 95
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	10 e0       	ldi	r17, 0x00	; 0
  90:	a0 e6       	ldi	r26, 0x60	; 96
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e2 ed       	ldi	r30, 0xD2	; 210
  96:	f4 e0       	ldi	r31, 0x04	; 4
  98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a0 37       	cpi	r26, 0x70	; 112
  a0:	b1 07       	cpc	r27, r17
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>

000000a4 <__do_clear_bss>:
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	a0 e7       	ldi	r26, 0x70	; 112
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
  ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
  ae:	a3 37       	cpi	r26, 0x73	; 115
  b0:	b2 07       	cpc	r27, r18
  b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
  b4:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  b8:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <keyfind>:

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;           /* set port direction as input-output */
  c0:	30 ef       	ldi	r19, 0xF0	; 240
		KEY_PRT = 0xFF;
  c2:	2f ef       	ldi	r18, 0xFF	; 255
				_delay_ms (40);	            /* 20 ms key debounce time */
				colloc = (KEY_PIN & 0x0F);
			}while(colloc == 0x0F);

			/* now check for rows */
			KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
  c4:	9f ee       	ldi	r25, 0xEF	; 239
			{
				rowloc = 0;
				break;
			}

			KEY_PRT = 0xDF;		/* check for pressed key in 2nd row */
  c6:	6f ed       	ldi	r22, 0xDF	; 223
			{
				rowloc = 1;
				break;
			}
			
			KEY_PRT = 0xBF;		/* check for pressed key in 3rd row */
  c8:	5f eb       	ldi	r21, 0xBF	; 191
			{
				rowloc = 2;
				break;
			}

			KEY_PRT = 0x7F;		/* check for pressed key in 4th row */
  ca:	4f e7       	ldi	r20, 0x7F	; 127

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;           /* set port direction as input-output */
  cc:	3a bb       	out	0x1a, r19	; 26
		KEY_PRT = 0xFF;
  ce:	2b bb       	out	0x1b, r18	; 27

		do
		{
			KEY_PRT &= 0x0F;      /* mask PORT for column read only */
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
  d6:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); /* read status of column */
  d8:	89 b3       	in	r24, 0x19	; 25
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <colloc>
		}while(colloc != 0x0F);
  e0:	8f 30       	cpi	r24, 0x0F	; 15
  e2:	b1 f7       	brne	.-20     	; 0xd0 <keyfind+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	e7 e8       	ldi	r30, 0x87	; 135
  e6:	f3 e1       	ldi	r31, 0x13	; 19
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <keyfind+0x28>
  ec:	00 c0       	rjmp	.+0      	; 0xee <keyfind+0x2e>
  ee:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);             /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
  f0:	89 b3       	in	r24, 0x19	; 25
  f2:	8f 70       	andi	r24, 0x0F	; 15
  f4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <colloc>
				}while(colloc == 0x0F);        /* check for any key press */
  f8:	8f 30       	cpi	r24, 0x0F	; 15
  fa:	a1 f3       	breq	.-24     	; 0xe4 <keyfind+0x24>
  fc:	ef e0       	ldi	r30, 0x0F	; 15
  fe:	f7 e2       	ldi	r31, 0x27	; 39
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <keyfind+0x40>
 104:	00 c0       	rjmp	.+0      	; 0x106 <keyfind+0x46>
 106:	00 00       	nop
				
				_delay_ms (40);	            /* 20 ms key debounce time */
				colloc = (KEY_PIN & 0x0F);
 108:	89 b3       	in	r24, 0x19	; 25
 10a:	8f 70       	andi	r24, 0x0F	; 15
 10c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <colloc>
			}while(colloc == 0x0F);
 110:	8f 30       	cpi	r24, 0x0F	; 15
 112:	41 f3       	breq	.-48     	; 0xe4 <keyfind+0x24>

			/* now check for rows */
			KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
 114:	9b bb       	out	0x1b, r25	; 27
			asm("NOP");
 116:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 118:	89 b3       	in	r24, 0x19	; 25
 11a:	8f 70       	andi	r24, 0x0F	; 15
 11c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <colloc>
			if(colloc != 0x0F)
 120:	8f 30       	cpi	r24, 0x0F	; 15
 122:	19 f0       	breq	.+6      	; 0x12a <keyfind+0x6a>
			{
				rowloc = 0;
 124:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <rowloc>
				break;
 128:	24 c0       	rjmp	.+72     	; 0x172 <keyfind+0xb2>
			}

			KEY_PRT = 0xDF;		/* check for pressed key in 2nd row */
 12a:	6b bb       	out	0x1b, r22	; 27
			asm("NOP");
 12c:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 12e:	89 b3       	in	r24, 0x19	; 25
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <colloc>
			if(colloc != 0x0F)
 136:	8f 30       	cpi	r24, 0x0F	; 15
 138:	21 f0       	breq	.+8      	; 0x142 <keyfind+0x82>
			{
				rowloc = 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <rowloc>
				break;
 140:	18 c0       	rjmp	.+48     	; 0x172 <keyfind+0xb2>
			}
			
			KEY_PRT = 0xBF;		/* check for pressed key in 3rd row */
 142:	5b bb       	out	0x1b, r21	; 27
			asm("NOP");
 144:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 146:	89 b3       	in	r24, 0x19	; 25
 148:	8f 70       	andi	r24, 0x0F	; 15
 14a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <colloc>
			if(colloc != 0x0F)
 14e:	8f 30       	cpi	r24, 0x0F	; 15
 150:	21 f0       	breq	.+8      	; 0x15a <keyfind+0x9a>
			{
				rowloc = 2;
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <rowloc>
				break;
 158:	0c c0       	rjmp	.+24     	; 0x172 <keyfind+0xb2>
			}

			KEY_PRT = 0x7F;		/* check for pressed key in 4th row */
 15a:	4b bb       	out	0x1b, r20	; 27
			asm("NOP");
 15c:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 15e:	89 b3       	in	r24, 0x19	; 25
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <colloc>
			if(colloc != 0x0F)
 166:	8f 30       	cpi	r24, 0x0F	; 15
 168:	09 f4       	brne	.+2      	; 0x16c <keyfind+0xac>
 16a:	b0 cf       	rjmp	.-160    	; 0xcc <keyfind+0xc>
			{
				rowloc = 3;
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <rowloc>
				break;
			}
	}
	if(colloc == 0x0E)
 172:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <colloc>
 176:	8e 30       	cpi	r24, 0x0E	; 14
 178:	59 f4       	brne	.+22     	; 0x190 <keyfind+0xd0>
		{
			return(keypad[rowloc][0]);
 17a:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <rowloc>
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	e0 5a       	subi	r30, 0xA0	; 160
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	80 81       	ld	r24, Z
 18e:	08 95       	ret
		}
	else if(colloc == 0x0D)
 190:	8d 30       	cpi	r24, 0x0D	; 13
 192:	59 f4       	brne	.+22     	; 0x1aa <keyfind+0xea>
		{
			return(keypad[rowloc][1]);
 194:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <rowloc>
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	e0 5a       	subi	r30, 0xA0	; 160
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	81 81       	ldd	r24, Z+1	; 0x01
 1a8:	08 95       	ret
		}
	else if(colloc == 0x0B)
 1aa:	8b 30       	cpi	r24, 0x0B	; 11
 1ac:	59 f4       	brne	.+22     	; 0x1c4 <keyfind+0x104>
		{
			return(keypad[rowloc][2]);
 1ae:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <rowloc>
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	e0 5a       	subi	r30, 0xA0	; 160
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	82 81       	ldd	r24, Z+2	; 0x02
 1c2:	08 95       	ret
		}
	else
		{
			return(keypad[rowloc][3]);
 1c4:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <rowloc>
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	ee 0f       	add	r30, r30
 1cc:	ff 1f       	adc	r31, r31
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	e0 5a       	subi	r30, 0xA0	; 160
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	83 81       	ldd	r24, Z+3	; 0x03
		}
 1d8:	08 95       	ret

000001da <__vector_11>:
#include "Keypad.h"

char g=0;

ISR(TIMER0_OVF_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24
	g = ~g;
 1e6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1ea:	80 95       	com	r24
 1ec:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
	if (g!=0)
 1f0:	88 23       	and	r24, r24
 1f2:	29 f0       	breq	.+10     	; 0x1fe <__vector_11+0x24>
	PORTD |= (1<<7);
 1f4:	97 9a       	sbi	0x12, 7	; 18
	if (g==0)
 1f6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1fa:	81 11       	cpse	r24, r1
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <__vector_11+0x26>
	PORTD &= ~(1<<7);
 1fe:	97 98       	cbi	0x12, 7	; 18
	TCNT0 = 0xF4;
 200:	84 ef       	ldi	r24, 0xF4	; 244
 202:	82 bf       	out	0x32, r24	; 50
}
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <Timer_dalay>:

void Timer_dalay()
{
	TIMSK=(1<<TOIE0);	/* Enable timer interrupt */
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0xF4;		/* load TCNT0, count for 13us */
 214:	84 ef       	ldi	r24, 0xF4	; 244
 216:	82 bf       	out	0x32, r24	; 50
	TCCR0 = (1<<CS01);	/* Timer0, normal mode, /8 prescalar */
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	83 bf       	out	0x33, r24	; 51
 21c:	08 95       	ret

0000021e <main>:
}

int main(void)
{
	DDRD |= 0xFF;		/* set PORTD as output port */
 21e:	81 b3       	in	r24, 0x11	; 17
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	81 bb       	out	0x11, r24	; 17
	UART_Init(9600);	/* set baud rate 1200 */
 224:	80 e8       	ldi	r24, 0x80	; 128
 226:	95 e2       	ldi	r25, 0x25	; 37
 228:	0e 94 0d 02 	call	0x41a	; 0x41a <UART_Init>
	sei();			/* enable global interrupt */
 22c:	78 94       	sei
	Timer_dalay();		/* call timer function */
 22e:	0e 94 08 01 	call	0x210	; 0x210 <Timer_dalay>
	char j, d=0;
	UART_TxChar('$');
 232:	84 e2       	ldi	r24, 0x24	; 36
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
	
	while(1)
	{
		j = keyfind();	/* search and find which key is pressed */
 23a:	0e 94 60 00 	call	0xc0	; 0xc0 <keyfind>
		switch (j)
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	b3 97       	sbiw	r30, 0x23	; 35
 244:	e7 31       	cpi	r30, 0x17	; 23
 246:	f1 05       	cpc	r31, r1
 248:	c0 f7       	brcc	.-16     	; 0x23a <main+0x1c>
 24a:	e6 5d       	subi	r30, 0xD6	; 214
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__tablejump2__>
		{
			case ('1'):
			UART_TxChar('$');	/* send the special character '$' */
 252:	84 e2       	ldi	r24, 0x24	; 36
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			UART_TxChar('1');	/* send '1' */
 25a:	81 e3       	ldi	r24, 0x31	; 49
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			d = ~j;
			UART_TxChar(d);	/* send invert of '1' */
 262:	8e ec       	ldi	r24, 0xCE	; 206
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
 26a:	8f e3       	ldi	r24, 0x3F	; 63
 26c:	9c e9       	ldi	r25, 0x9C	; 156
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x50>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x56>
 274:	00 00       	nop
 276:	e1 cf       	rjmp	.-62     	; 0x23a <main+0x1c>
			_delay_ms(10);
			break;
			
			case ('2'):
			UART_TxChar('$');
 278:	84 e2       	ldi	r24, 0x24	; 36
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			UART_TxChar('2');
 280:	82 e3       	ldi	r24, 0x32	; 50
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			d = ~j;
			UART_TxChar(d);
 288:	8d ec       	ldi	r24, 0xCD	; 205
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
 290:	8f e3       	ldi	r24, 0x3F	; 63
 292:	9c e9       	ldi	r25, 0x9C	; 156
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <main+0x76>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x7c>
 29a:	00 00       	nop
 29c:	ce cf       	rjmp	.-100    	; 0x23a <main+0x1c>
			_delay_ms(10);
			break;
			
			case ('3'):
			UART_TxChar('$');
 29e:	84 e2       	ldi	r24, 0x24	; 36
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			UART_TxChar('3');
 2a6:	83 e3       	ldi	r24, 0x33	; 51
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			d = ~j;
			UART_TxChar(d);
 2ae:	8c ec       	ldi	r24, 0xCC	; 204
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
 2b6:	8f e3       	ldi	r24, 0x3F	; 63
 2b8:	9c e9       	ldi	r25, 0x9C	; 156
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0x9c>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0xa2>
 2c0:	00 00       	nop
 2c2:	bb cf       	rjmp	.-138    	; 0x23a <main+0x1c>
			_delay_ms(10);
			break;
			
			case ('4'):
			UART_TxChar('$');
 2c4:	84 e2       	ldi	r24, 0x24	; 36
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			UART_TxChar('4');
 2cc:	84 e3       	ldi	r24, 0x34	; 52
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			d = ~j;
			UART_TxChar(d);
 2d4:	8b ec       	ldi	r24, 0xCB	; 203
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
 2dc:	8f e3       	ldi	r24, 0x3F	; 63
 2de:	9c e9       	ldi	r25, 0x9C	; 156
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <main+0xc2>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0xc8>
 2e6:	00 00       	nop
 2e8:	a8 cf       	rjmp	.-176    	; 0x23a <main+0x1c>
			_delay_ms(10);
			break;
			
			case ('5'):
			UART_TxChar('$');
 2ea:	84 e2       	ldi	r24, 0x24	; 36
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			UART_TxChar('5');
 2f2:	85 e3       	ldi	r24, 0x35	; 53
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			d = ~j;
			UART_TxChar(d);
 2fa:	8a ec       	ldi	r24, 0xCA	; 202
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
 302:	8f e3       	ldi	r24, 0x3F	; 63
 304:	9c e9       	ldi	r25, 0x9C	; 156
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <main+0xe8>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <main+0xee>
 30c:	00 00       	nop
 30e:	95 cf       	rjmp	.-214    	; 0x23a <main+0x1c>
			_delay_ms(10);
			break;
			
			case ('6'):
			UART_TxChar('$');
 310:	84 e2       	ldi	r24, 0x24	; 36
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			UART_TxChar('6');
 318:	86 e3       	ldi	r24, 0x36	; 54
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			d = ~j;
			UART_TxChar(d);
 320:	89 ec       	ldi	r24, 0xC9	; 201
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
 328:	8f e3       	ldi	r24, 0x3F	; 63
 32a:	9c e9       	ldi	r25, 0x9C	; 156
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <main+0x10e>
 330:	00 c0       	rjmp	.+0      	; 0x332 <main+0x114>
 332:	00 00       	nop
 334:	82 cf       	rjmp	.-252    	; 0x23a <main+0x1c>
			_delay_ms(10);
			break;
			
			case ('7'):
			UART_TxChar('$');
 336:	84 e2       	ldi	r24, 0x24	; 36
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			UART_TxChar('7');
 33e:	87 e3       	ldi	r24, 0x37	; 55
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			d = ~j;
			UART_TxChar(d);
 346:	88 ec       	ldi	r24, 0xC8	; 200
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
 34e:	8f e3       	ldi	r24, 0x3F	; 63
 350:	9c e9       	ldi	r25, 0x9C	; 156
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <main+0x134>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0x13a>
 358:	00 00       	nop
 35a:	6f cf       	rjmp	.-290    	; 0x23a <main+0x1c>
			_delay_ms(10);
			break;
			
			case ('8'):
			UART_TxChar('$');
 35c:	84 e2       	ldi	r24, 0x24	; 36
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			UART_TxChar('8');
 364:	88 e3       	ldi	r24, 0x38	; 56
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			d = ~j;
			UART_TxChar(d);
 36c:	87 ec       	ldi	r24, 0xC7	; 199
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
 374:	8f e3       	ldi	r24, 0x3F	; 63
 376:	9c e9       	ldi	r25, 0x9C	; 156
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <main+0x15a>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <main+0x160>
 37e:	00 00       	nop
 380:	5c cf       	rjmp	.-328    	; 0x23a <main+0x1c>
			_delay_ms(10);
			break;

			case ('9'):
			UART_TxChar('$');
 382:	84 e2       	ldi	r24, 0x24	; 36
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			UART_TxChar('9');
 38a:	89 e3       	ldi	r24, 0x39	; 57
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			d = ~j;
			UART_TxChar(d);
 392:	86 ec       	ldi	r24, 0xC6	; 198
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
 39a:	8f e3       	ldi	r24, 0x3F	; 63
 39c:	9c e9       	ldi	r25, 0x9C	; 156
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <main+0x180>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <main+0x186>
 3a4:	00 00       	nop
 3a6:	49 cf       	rjmp	.-366    	; 0x23a <main+0x1c>
			_delay_ms(10);
			break;
			
			case ('0'):
			UART_TxChar('$');
 3a8:	84 e2       	ldi	r24, 0x24	; 36
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			UART_TxChar('0');
 3b0:	80 e3       	ldi	r24, 0x30	; 48
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			d = ~j;
			UART_TxChar(d);
 3b8:	8f ec       	ldi	r24, 0xCF	; 207
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
 3c0:	8f e3       	ldi	r24, 0x3F	; 63
 3c2:	9c e9       	ldi	r25, 0x9C	; 156
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <main+0x1a6>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x1ac>
 3ca:	00 00       	nop
 3cc:	36 cf       	rjmp	.-404    	; 0x23a <main+0x1c>
			_delay_ms(10);
			break;
			
			case ('*'):
			UART_TxChar('$');
 3ce:	84 e2       	ldi	r24, 0x24	; 36
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			UART_TxChar('*');
 3d6:	8a e2       	ldi	r24, 0x2A	; 42
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			d = ~j;
			UART_TxChar(d);
 3de:	85 ed       	ldi	r24, 0xD5	; 213
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
 3e6:	8f e3       	ldi	r24, 0x3F	; 63
 3e8:	9c e9       	ldi	r25, 0x9C	; 156
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <main+0x1cc>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x1d2>
 3f0:	00 00       	nop
 3f2:	23 cf       	rjmp	.-442    	; 0x23a <main+0x1c>
			_delay_ms(10);
			break;
			
			case ('#'):
			UART_TxChar('$');
 3f4:	84 e2       	ldi	r24, 0x24	; 36
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			UART_TxChar('#');
 3fc:	83 e2       	ldi	r24, 0x23	; 35
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
			d = ~j;
			UART_TxChar(d);
 404:	8c ed       	ldi	r24, 0xDC	; 220
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 3b 02 	call	0x476	; 0x476 <UART_TxChar>
 40c:	8f e3       	ldi	r24, 0x3F	; 63
 40e:	9c e9       	ldi	r25, 0x9C	; 156
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	00 00       	nop
 418:	10 cf       	rjmp	.-480    	; 0x23a <main+0x1c>

0000041a <UART_Init>:

unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
	return(UDR);			/* Return the byte*/
}
 41a:	2a b1       	in	r18, 0x0a	; 10
 41c:	28 61       	ori	r18, 0x18	; 24
 41e:	2a b9       	out	0x0a, r18	; 10
 420:	20 b5       	in	r18, 0x20	; 32
 422:	26 68       	ori	r18, 0x86	; 134
 424:	20 bd       	out	0x20, r18	; 32
 426:	dc 01       	movw	r26, r24
 428:	cb 01       	movw	r24, r22
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	aa 1f       	adc	r26, r26
 430:	bb 1f       	adc	r27, r27
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	aa 1f       	adc	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	9c 01       	movw	r18, r24
 43c:	ad 01       	movw	r20, r26
 43e:	22 0f       	add	r18, r18
 440:	33 1f       	adc	r19, r19
 442:	44 1f       	adc	r20, r20
 444:	55 1f       	adc	r21, r21
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	44 1f       	adc	r20, r20
 44c:	55 1f       	adc	r21, r21
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	74 e2       	ldi	r23, 0x24	; 36
 452:	84 ef       	ldi	r24, 0xF4	; 244
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 3f 02 	call	0x47e	; 0x47e <__udivmodsi4>
 45a:	8f ef       	ldi	r24, 0xFF	; 255
 45c:	82 0f       	add	r24, r18
 45e:	89 b9       	out	0x09, r24	; 9
 460:	da 01       	movw	r26, r20
 462:	c9 01       	movw	r24, r18
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	a1 09       	sbc	r26, r1
 468:	b1 09       	sbc	r27, r1
 46a:	89 2f       	mov	r24, r25
 46c:	9a 2f       	mov	r25, r26
 46e:	ab 2f       	mov	r26, r27
 470:	bb 27       	eor	r27, r27
 472:	80 bd       	out	0x20, r24	; 32
 474:	08 95       	ret

00000476 <UART_TxChar>:

void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
 476:	5d 9b       	sbis	0x0b, 5	; 11
 478:	fe cf       	rjmp	.-4      	; 0x476 <UART_TxChar>
	UDR = ch ;
 47a:	8c b9       	out	0x0c, r24	; 12
 47c:	08 95       	ret

0000047e <__udivmodsi4>:
 47e:	a1 e2       	ldi	r26, 0x21	; 33
 480:	1a 2e       	mov	r1, r26
 482:	aa 1b       	sub	r26, r26
 484:	bb 1b       	sub	r27, r27
 486:	fd 01       	movw	r30, r26
 488:	0d c0       	rjmp	.+26     	; 0x4a4 <__udivmodsi4_ep>

0000048a <__udivmodsi4_loop>:
 48a:	aa 1f       	adc	r26, r26
 48c:	bb 1f       	adc	r27, r27
 48e:	ee 1f       	adc	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	a2 17       	cp	r26, r18
 494:	b3 07       	cpc	r27, r19
 496:	e4 07       	cpc	r30, r20
 498:	f5 07       	cpc	r31, r21
 49a:	20 f0       	brcs	.+8      	; 0x4a4 <__udivmodsi4_ep>
 49c:	a2 1b       	sub	r26, r18
 49e:	b3 0b       	sbc	r27, r19
 4a0:	e4 0b       	sbc	r30, r20
 4a2:	f5 0b       	sbc	r31, r21

000004a4 <__udivmodsi4_ep>:
 4a4:	66 1f       	adc	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	1a 94       	dec	r1
 4ae:	69 f7       	brne	.-38     	; 0x48a <__udivmodsi4_loop>
 4b0:	60 95       	com	r22
 4b2:	70 95       	com	r23
 4b4:	80 95       	com	r24
 4b6:	90 95       	com	r25
 4b8:	9b 01       	movw	r18, r22
 4ba:	ac 01       	movw	r20, r24
 4bc:	bd 01       	movw	r22, r26
 4be:	cf 01       	movw	r24, r30
 4c0:	08 95       	ret

000004c2 <__tablejump2__>:
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	05 90       	lpm	r0, Z+
 4c8:	f4 91       	lpm	r31, Z
 4ca:	e0 2d       	mov	r30, r0
 4cc:	09 94       	ijmp

000004ce <_exit>:
 4ce:	f8 94       	cli

000004d0 <__stop_program>:
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__stop_program>
