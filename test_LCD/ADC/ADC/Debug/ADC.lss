
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000026a  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c69  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070a  00000000  00000000  00001021  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ce  00000000  00000000  0000172b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ea  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002662  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  7a:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
  82:	98 b3       	in	r25, 0x18	; 24
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	98 bb       	out	0x18, r25	; 24
  8e:	c0 98       	cbi	0x18, 0	; 24
  90:	c1 9a       	sbi	0x18, 1	; 24
  92:	35 e0       	ldi	r19, 0x05	; 5
  94:	3a 95       	dec	r19
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_Command+0x12>
  98:	00 00       	nop
  9a:	c1 98       	cbi	0x18, 1	; 24
  9c:	ef e1       	ldi	r30, 0x1F	; 31
  9e:	f3 e0       	ldi	r31, 0x03	; 3
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_Command+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_Command+0x24>
  a6:	00 00       	nop
  a8:	28 b3       	in	r18, 0x18	; 24
  aa:	2f 70       	andi	r18, 0x0F	; 15
  ac:	f0 e1       	ldi	r31, 0x10	; 16
  ae:	8f 9f       	mul	r24, r31
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	82 2b       	or	r24, r18
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	c1 9a       	sbi	0x18, 1	; 24
  ba:	35 e0       	ldi	r19, 0x05	; 5
  bc:	3a 95       	dec	r19
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_Command+0x3a>
  c0:	00 00       	nop
  c2:	c1 98       	cbi	0x18, 1	; 24
  c4:	8f e3       	ldi	r24, 0x3F	; 63
  c6:	9f e1       	ldi	r25, 0x1F	; 31
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_Command+0x46>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_Command+0x4c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <LCD_Char>:
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	9f 70       	andi	r25, 0x0F	; 15
  d6:	28 2f       	mov	r18, r24
  d8:	20 7f       	andi	r18, 0xF0	; 240
  da:	92 2b       	or	r25, r18
  dc:	98 bb       	out	0x18, r25	; 24
  de:	c0 9a       	sbi	0x18, 0	; 24
  e0:	c1 9a       	sbi	0x18, 1	; 24
  e2:	35 e0       	ldi	r19, 0x05	; 5
  e4:	3a 95       	dec	r19
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_Char+0x12>
  e8:	00 00       	nop
  ea:	c1 98       	cbi	0x18, 1	; 24
  ec:	ef e1       	ldi	r30, 0x1F	; 31
  ee:	f3 e0       	ldi	r31, 0x03	; 3
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_Char+0x1e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_Char+0x24>
  f6:	00 00       	nop
  f8:	28 b3       	in	r18, 0x18	; 24
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	f0 e1       	ldi	r31, 0x10	; 16
  fe:	8f 9f       	mul	r24, r31
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	82 2b       	or	r24, r18
 106:	88 bb       	out	0x18, r24	; 24
 108:	c1 9a       	sbi	0x18, 1	; 24
 10a:	35 e0       	ldi	r19, 0x05	; 5
 10c:	3a 95       	dec	r19
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Char+0x3a>
 110:	00 00       	nop
 112:	c1 98       	cbi	0x18, 1	; 24
 114:	8f e3       	ldi	r24, 0x3F	; 63
 116:	9f e1       	ldi	r25, 0x1F	; 31
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Char+0x46>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_Char+0x4c>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <LCD_Init>:
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 bb       	out	0x17, r24	; 23
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	89 ef       	ldi	r24, 0xF9	; 249
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <LCD_Init+0xa>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_Init+0x14>
 136:	00 00       	nop
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 156:	8f e3       	ldi	r24, 0x3F	; 63
 158:	9f e1       	ldi	r25, 0x1F	; 31
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Init+0x38>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Init+0x3e>
 160:	00 00       	nop
 162:	08 95       	ret

00000164 <LCD_String>:
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
 16a:	88 81       	ld	r24, Y
 16c:	88 23       	and	r24, r24
 16e:	31 f0       	breq	.+12     	; 0x17c <LCD_String+0x18>
 170:	21 96       	adiw	r28, 0x01	; 1
 172:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Char>
 176:	89 91       	ld	r24, Y+
 178:	81 11       	cpse	r24, r1
 17a:	fb cf       	rjmp	.-10     	; 0x172 <LCD_String+0xe>
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <ADC_Init>:
#include <avr/io.h>
#include "util/delay.h"

void ADC_Init()
{
	DDRA = 0x00;			/* Make ADC port as input */
 182:	1a ba       	out	0x1a, r1	; 26
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);			/* Enable ADC, fr/128  */
 184:	86 b1       	in	r24, 0x06	; 6
 186:	87 68       	ori	r24, 0x87	; 135
 188:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1 << REFS0);			/* Vref: Avcc, ADC channel: 0 */
 18a:	3e 9a       	sbi	0x07, 6	; 7
 18c:	08 95       	ret

0000018e <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX |= (channel & 0x0f);	/* Set input channel to read */
 18e:	97 b1       	in	r25, 0x07	; 7
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	98 2b       	or	r25, r24
 194:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1 << ADSC);		/* Start conversion */
 196:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1 << ADIF)) == 0);	/* Monitor end of conversion interrupt */
 198:	34 9b       	sbis	0x06, 4	; 6
 19a:	fe cf       	rjmp	.-4      	; 0x198 <ADC_Read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	85 e3       	ldi	r24, 0x35	; 53
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <ADC_Read+0x10>
 1a2:	00 00       	nop
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
 1a4:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	98 2f       	mov	r25, r24
 1ac:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
 1ae:	82 0f       	add	r24, r18
 1b0:	91 1d       	adc	r25, r1
 1b2:	08 95       	ret

000001b4 <main>:
#define LCD_Port PORTB			/* Define LCD data port */
#define RS 0				/* Define Register Select pin */
#define EN 1 				/* Define Enable signal pin */

int main()
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <main+0x6>
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <main+0x8>
 1bc:	1f 92       	push	r1
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
	char String[5];
	int value;

	ADC_Init();
 1c2:	0e 94 c1 00 	call	0x182	; 0x182 <ADC_Init>
	LCD_Init();			/* Initialization of LCD */
 1c6:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Init>
	LCD_String("ADC value");	/* Write string on 1st line of LCD */
 1ca:	80 e6       	ldi	r24, 0x60	; 96
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_String>

	while(1)
	{
		
		LCD_Command(0xc4);	/* LCD16x2 cursor position */
 1d2:	84 ec       	ldi	r24, 0xC4	; 196
 1d4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
		value = ADC_Read(0);	/* Read ADC channel 0 */
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 c7 00 	call	0x18e	; 0x18e <ADC_Read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1de:	4a e0       	ldi	r20, 0x0A	; 10
 1e0:	be 01       	movw	r22, r28
 1e2:	6f 5f       	subi	r22, 0xFF	; 255
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
 1e6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__itoa_ncheck>
		itoa(value,String,10);	/* Integer to string conversion */
		LCD_String(String);
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_String>
		LCD_String("  ");
 1f2:	8a e6       	ldi	r24, 0x6A	; 106
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_String>
 1fa:	eb cf       	rjmp	.-42     	; 0x1d2 <main+0x1e>

000001fc <__itoa_ncheck>:
 1fc:	bb 27       	eor	r27, r27
 1fe:	4a 30       	cpi	r20, 0x0A	; 10
 200:	31 f4       	brne	.+12     	; 0x20e <__itoa_ncheck+0x12>
 202:	99 23       	and	r25, r25
 204:	22 f4       	brpl	.+8      	; 0x20e <__itoa_ncheck+0x12>
 206:	bd e2       	ldi	r27, 0x2D	; 45
 208:	90 95       	com	r25
 20a:	81 95       	neg	r24
 20c:	9f 4f       	sbci	r25, 0xFF	; 255
 20e:	0c 94 0a 01 	jmp	0x214	; 0x214 <__utoa_common>

00000212 <__utoa_ncheck>:
 212:	bb 27       	eor	r27, r27

00000214 <__utoa_common>:
 214:	fb 01       	movw	r30, r22
 216:	55 27       	eor	r21, r21
 218:	aa 27       	eor	r26, r26
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	aa 1f       	adc	r26, r26
 220:	a4 17       	cp	r26, r20
 222:	10 f0       	brcs	.+4      	; 0x228 <__utoa_common+0x14>
 224:	a4 1b       	sub	r26, r20
 226:	83 95       	inc	r24
 228:	50 51       	subi	r21, 0x10	; 16
 22a:	b9 f7       	brne	.-18     	; 0x21a <__utoa_common+0x6>
 22c:	a0 5d       	subi	r26, 0xD0	; 208
 22e:	aa 33       	cpi	r26, 0x3A	; 58
 230:	08 f0       	brcs	.+2      	; 0x234 <__utoa_common+0x20>
 232:	a9 5d       	subi	r26, 0xD9	; 217
 234:	a1 93       	st	Z+, r26
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	79 f7       	brne	.-34     	; 0x218 <__utoa_common+0x4>
 23a:	b1 11       	cpse	r27, r1
 23c:	b1 93       	st	Z+, r27
 23e:	11 92       	st	Z+, r1
 240:	cb 01       	movw	r24, r22
 242:	0c 94 23 01 	jmp	0x246	; 0x246 <strrev>

00000246 <strrev>:
 246:	dc 01       	movw	r26, r24
 248:	fc 01       	movw	r30, r24
 24a:	67 2f       	mov	r22, r23
 24c:	71 91       	ld	r23, Z+
 24e:	77 23       	and	r23, r23
 250:	e1 f7       	brne	.-8      	; 0x24a <strrev+0x4>
 252:	32 97       	sbiw	r30, 0x02	; 2
 254:	04 c0       	rjmp	.+8      	; 0x25e <strrev+0x18>
 256:	7c 91       	ld	r23, X
 258:	6d 93       	st	X+, r22
 25a:	70 83       	st	Z, r23
 25c:	62 91       	ld	r22, -Z
 25e:	ae 17       	cp	r26, r30
 260:	bf 07       	cpc	r27, r31
 262:	c8 f3       	brcs	.-14     	; 0x256 <strrev+0x10>
 264:	08 95       	ret

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
