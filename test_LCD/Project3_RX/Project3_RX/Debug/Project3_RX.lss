
Project3_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000196  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000927  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000696  00000000  00000000  00000c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000472  00000000  00000000  000012bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034f  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000179  00000000  00000000  00001b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e9       	ldi	r30, 0x96	; 150
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	6c d0       	rcall	.+216    	; 0x132 <main>
  5a:	9b c0       	rjmp	.+310    	; 0x192 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PWM_Init>:
    }
}

void PWM_Init()
{
	 TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  5e:	82 ea       	ldi	r24, 0xA2	; 162
  60:	8f bd       	out	0x2f, r24	; 47
	 TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS10);
  62:	89 e1       	ldi	r24, 0x19	; 25
  64:	8e bd       	out	0x2e, r24	; 46
	 ICR1 = 26;
  66:	8a e1       	ldi	r24, 0x1A	; 26
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	97 bd       	out	0x27, r25	; 39
  6c:	86 bd       	out	0x26, r24	; 38
	 OCR1B = 13; 
  6e:	8d e0       	ldi	r24, 0x0D	; 13
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	99 bd       	out	0x29, r25	; 41
  74:	88 bd       	out	0x28, r24	; 40
  76:	08 95       	ret

00000078 <Kiemtra>:
}

void Kiemtra()
{
	switch (a)
  78:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  7c:	82 33       	cpi	r24, 0x32	; 50
  7e:	e9 f0       	breq	.+58     	; 0xba <Kiemtra+0x42>
  80:	18 f4       	brcc	.+6      	; 0x88 <Kiemtra+0x10>
  82:	81 33       	cpi	r24, 0x31	; 49
  84:	31 f0       	breq	.+12     	; 0x92 <Kiemtra+0x1a>
  86:	08 95       	ret
  88:	83 33       	cpi	r24, 0x33	; 51
  8a:	59 f1       	breq	.+86     	; 0xe2 <Kiemtra+0x6a>
  8c:	84 33       	cpi	r24, 0x34	; 52
  8e:	e9 f1       	breq	.+122    	; 0x10a <Kiemtra+0x92>
  90:	08 95       	ret
	{
		case ('1'):
			UART_Write_Chr('$');	/* send the special character '$' */
  92:	84 e2       	ldi	r24, 0x24	; 36
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	79 d0       	rcall	.+242    	; 0x18a <UART_Write_Chr>
			UART_Write_Chr('1');	/* send '1' */
  98:	81 e3       	ldi	r24, 0x31	; 49
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	76 d0       	rcall	.+236    	; 0x18a <UART_Write_Chr>
			d = ~j;
  9e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <j>
  a2:	80 95       	com	r24
  a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			UART_Write_Chr(d);	/* send invert of '1' */
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	6f d0       	rcall	.+222    	; 0x18a <UART_Write_Chr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	8f e3       	ldi	r24, 0x3F	; 63
  ae:	9c e9       	ldi	r25, 0x9C	; 156
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <Kiemtra+0x38>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <Kiemtra+0x3e>
  b6:	00 00       	nop
  b8:	08 95       	ret
			_delay_ms(10);
			break;
		case ('2'):
			UART_Write_Chr('$');	/* send the special character '$' */
  ba:	84 e2       	ldi	r24, 0x24	; 36
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	65 d0       	rcall	.+202    	; 0x18a <UART_Write_Chr>
			UART_Write_Chr('2');	/* send '1' */
  c0:	82 e3       	ldi	r24, 0x32	; 50
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	62 d0       	rcall	.+196    	; 0x18a <UART_Write_Chr>
			d = ~j;
  c6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <j>
  ca:	80 95       	com	r24
  cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			UART_Write_Chr(d);	/* send invert of '1' */
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	5b d0       	rcall	.+182    	; 0x18a <UART_Write_Chr>
  d4:	8f e3       	ldi	r24, 0x3F	; 63
  d6:	9c e9       	ldi	r25, 0x9C	; 156
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <Kiemtra+0x60>
  dc:	00 c0       	rjmp	.+0      	; 0xde <Kiemtra+0x66>
  de:	00 00       	nop
  e0:	08 95       	ret
			_delay_ms(10);
			break;
		case ('3'):
			UART_Write_Chr('$');	/* send the special character '$' */
  e2:	84 e2       	ldi	r24, 0x24	; 36
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	51 d0       	rcall	.+162    	; 0x18a <UART_Write_Chr>
			UART_Write_Chr('3');	/* send '1' */
  e8:	83 e3       	ldi	r24, 0x33	; 51
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	4e d0       	rcall	.+156    	; 0x18a <UART_Write_Chr>
			d = ~j;
  ee:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <j>
  f2:	80 95       	com	r24
  f4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			UART_Write_Chr(d);	/* send invert of '1' */
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	47 d0       	rcall	.+142    	; 0x18a <UART_Write_Chr>
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	9c e9       	ldi	r25, 0x9C	; 156
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <Kiemtra+0x88>
 104:	00 c0       	rjmp	.+0      	; 0x106 <Kiemtra+0x8e>
 106:	00 00       	nop
 108:	08 95       	ret
			_delay_ms(10);
			break;
		case ('4'):
			UART_Write_Chr('$');	/* send the special character '$' */
 10a:	84 e2       	ldi	r24, 0x24	; 36
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	3d d0       	rcall	.+122    	; 0x18a <UART_Write_Chr>
			UART_Write_Chr('4');	/* send '1' */
 110:	84 e3       	ldi	r24, 0x34	; 52
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	3a d0       	rcall	.+116    	; 0x18a <UART_Write_Chr>
			d = ~j;
 116:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <j>
 11a:	80 95       	com	r24
 11c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			UART_Write_Chr(d);	/* send invert of '1' */
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	33 d0       	rcall	.+102    	; 0x18a <UART_Write_Chr>
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9c e9       	ldi	r25, 0x9C	; 156
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <Kiemtra+0xb0>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <Kiemtra+0xb6>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <main>:
char a = '0';
char j, d = 0;

int main(void)
{
	DDRC = 0x00;
 132:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	85 bb       	out	0x15, r24	; 21
	PWM_Init();
 138:	92 df       	rcall	.-220    	; 0x5e <PWM_Init>
	OCR1B = 210;
 13a:	82 ed       	ldi	r24, 0xD2	; 210
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	99 bd       	out	0x29, r25	; 41
 140:	88 bd       	out	0x28, r24	; 40
	UART_Init();
 142:	1a d0       	rcall	.+52     	; 0x178 <UART_Init>
	
    while (1) 
    {
		if (btn1)
		{
			a = '1';
 144:	d1 e3       	ldi	r29, 0x31	; 49
		}
		if (btn2)
		{
			a = '2';
 146:	0f 2e       	mov	r0, r31
 148:	f2 e3       	ldi	r31, 0x32	; 50
 14a:	ff 2e       	mov	r15, r31
 14c:	f0 2d       	mov	r31, r0
		}
		if (btn3)
		{
			a = '3';
 14e:	03 e3       	ldi	r16, 0x33	; 51
		}
		if (btn4)
		{
			a = '4';
 150:	14 e3       	ldi	r17, 0x34	; 52
		}
		Kiemtra();
		a = '0';
 152:	c0 e3       	ldi	r28, 0x30	; 48
	OCR1B = 210;
	UART_Init();
	
    while (1) 
    {
		if (btn1)
 154:	83 b3       	in	r24, 0x13	; 19
		{
			a = '1';
 156:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		if (btn2)
 15a:	98 9b       	sbis	0x13, 0	; 19
		{
			a = '2';
 15c:	f0 92 60 00 	sts	0x0060, r15	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		if (btn3)
 160:	99 9b       	sbis	0x13, 1	; 19
		{
			a = '3';
 162:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		if (btn4)
 166:	83 b3       	in	r24, 0x13	; 19
 168:	83 70       	andi	r24, 0x03	; 3
 16a:	11 f4       	brne	.+4      	; 0x170 <main+0x3e>
		{
			a = '4';
 16c:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		Kiemtra();
 170:	83 df       	rcall	.-250    	; 0x78 <Kiemtra>
		a = '0';
 172:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
    }
 176:	ee cf       	rjmp	.-36     	; 0x154 <main+0x22>

00000178 <UART_Init>:
#include "avr/sfr_defs.h"
#include "UART.h"

void UART_Init()
{
	UBRRL = 102;
 178:	86 e6       	ldi	r24, 0x66	; 102
 17a:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
 17c:	8a b1       	in	r24, 0x0a	; 10
 17e:	88 69       	ori	r24, 0x98	; 152
 180:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);						//Baud = 9600, U2X = 0, F = 16MHz
 182:	80 b5       	in	r24, 0x20	; 32
 184:	86 60       	ori	r24, 0x06	; 6
 186:	80 bd       	out	0x20, r24	; 32
 188:	08 95       	ret

0000018a <UART_Write_Chr>:
}

void UART_Write_Chr(unsigned char c)
{
	while(bit_is_clear(UCSRA, UDRE));
 18a:	5d 9b       	sbis	0x0b, 5	; 11
 18c:	fe cf       	rjmp	.-4      	; 0x18a <UART_Write_Chr>
	UDR = c;
 18e:	8c b9       	out	0x0c, r24	; 12
 190:	08 95       	ret

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
