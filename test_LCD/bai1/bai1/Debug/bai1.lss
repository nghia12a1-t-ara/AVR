
bai1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000929  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000619  00000000  00000000  00000bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cb  00000000  00000000  000011ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035e  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000311  00000000  00000000  000019ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001cbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  64:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_Write_High_Data>:
	while (str[i] != 0)
	{
		LCD_Chr_Cp(str[i]);
		i++;
	}
}
  6c:	95 b3       	in	r25, 0x15	; 21
  6e:	9f 70       	andi	r25, 0x0F	; 15
  70:	95 bb       	out	0x15, r25	; 21
  72:	95 b3       	in	r25, 0x15	; 21
  74:	80 7f       	andi	r24, 0xF0	; 240
  76:	98 2b       	or	r25, r24
  78:	95 bb       	out	0x15, r25	; 21
  7a:	08 95       	ret

0000007c <LCD_Write_Low_Data>:
  7c:	95 b3       	in	r25, 0x15	; 21
  7e:	9f 70       	andi	r25, 0x0F	; 15
  80:	95 bb       	out	0x15, r25	; 21
  82:	95 b3       	in	r25, 0x15	; 21
  84:	82 95       	swap	r24
  86:	80 7f       	andi	r24, 0xF0	; 240
  88:	98 2b       	or	r25, r24
  8a:	95 bb       	out	0x15, r25	; 21
  8c:	08 95       	ret

0000008e <LCD_Enable>:
  8e:	a9 9a       	sbi	0x15, 1	; 21
  90:	a9 98       	cbi	0x15, 1	; 21
  92:	08 95       	ret

00000094 <LCD_Cmd>:
  94:	cf 93       	push	r28
  96:	c8 2f       	mov	r28, r24
  98:	a8 98       	cbi	0x15, 0	; 21
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Write_High_Data>
  9e:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_Enable>
  a2:	8c 2f       	mov	r24, r28
  a4:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_Write_Low_Data>
  a8:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_Enable>
  ac:	a9 98       	cbi	0x15, 1	; 21
  ae:	a9 9a       	sbi	0x15, 1	; 21
  b0:	8f e3       	ldi	r24, 0x3F	; 63
  b2:	9f e1       	ldi	r25, 0x1F	; 31
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_Cmd+0x20>
  b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_Cmd+0x26>
  ba:	00 00       	nop
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <LCD_Init>:
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	8c 7f       	andi	r24, 0xFC	; 252
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	80 e3       	ldi	r24, 0x30	; 48
  c8:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_Cmd>
  cc:	8f e1       	ldi	r24, 0x1F	; 31
  ce:	9e e4       	ldi	r25, 0x4E	; 78
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_Init+0x10>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_Init+0x16>
  d6:	00 00       	nop
  d8:	80 e3       	ldi	r24, 0x30	; 48
  da:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_Cmd>
  de:	8f e9       	ldi	r24, 0x9F	; 159
  e0:	9f e0       	ldi	r25, 0x0F	; 15
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_Init+0x22>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_Init+0x28>
  e8:	00 00       	nop
  ea:	80 e3       	ldi	r24, 0x30	; 48
  ec:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_Cmd>
  f0:	88 e3       	ldi	r24, 0x38	; 56
  f2:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_Cmd>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_Cmd>
  fc:	8c e0       	ldi	r24, 0x0C	; 12
  fe:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_Cmd>
 102:	08 95       	ret

00000104 <LCD_Chr_Cp>:
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
 108:	a8 9a       	sbi	0x15, 0	; 21
 10a:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Write_High_Data>
 10e:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_Enable>
 112:	8c 2f       	mov	r24, r28
 114:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_Write_Low_Data>
 118:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_Enable>
 11c:	8f e9       	ldi	r24, 0x9F	; 159
 11e:	9f e0       	ldi	r25, 0x0F	; 15
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_Chr_Cp+0x1c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_Chr_Cp+0x22>
 126:	00 00       	nop
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <main>:

int main(void)
{	
	DDRD |= 0xFF;
 12c:	81 b3       	in	r24, 0x11	; 17
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0xFF;
 132:	94 b3       	in	r25, 0x14	; 20
 134:	84 bb       	out	0x14, r24	; 20
	PORTA |= (1<<DDA1);
 136:	d9 9a       	sbi	0x1b, 1	; 27
	LCD_Init();
 138:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_Init>
	LCD_Write_High_Data(0x31);
 13c:	81 e3       	ldi	r24, 0x31	; 49
 13e:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_Write_High_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	87 ea       	ldi	r24, 0xA7	; 167
 146:	91 e6       	ldi	r25, 0x61	; 97
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x1c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x26>
 152:	00 00       	nop
	_delay_ms(2000);
	LCD_Write_Low_Data(0x31);
 154:	81 e3       	ldi	r24, 0x31	; 49
 156:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_Write_Low_Data>
	unsigned char i = 0;
 15a:	c0 e0       	ldi	r28, 0x00	; 0
	
    /* Replace with your application code */
    while (1) 
    {
		if ((PINA&(1<<PINA1)) == 0)
 15c:	c9 99       	sbic	0x19, 1	; 25
 15e:	fe cf       	rjmp	.-4      	; 0x15c <main+0x30>
		{	
			i++;
 160:	cf 5f       	subi	r28, 0xFF	; 255
			LCD_Chr_Cp(i);
 162:	8c 2f       	mov	r24, r28
 164:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Chr_Cp>
			while((PINA&(1<<PINA1)) == 0);
 168:	c9 9b       	sbis	0x19, 1	; 25
 16a:	fe cf       	rjmp	.-4      	; 0x168 <main+0x3c>
 16c:	f7 cf       	rjmp	.-18     	; 0x15c <main+0x30>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
