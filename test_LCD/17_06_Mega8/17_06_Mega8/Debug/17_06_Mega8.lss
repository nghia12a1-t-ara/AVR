
17_06_Mega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000238  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bac  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c3  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000527  00000000  00000000  0000162f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000396  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b0  00000000  00000000  00002016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000025c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	bd c0       	rjmp	.+378    	; 0x192 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e3       	ldi	r30, 0x38	; 56
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e6       	ldi	r26, 0x68	; 104
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ac 36       	cpi	r26, 0x6C	; 108
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	90 d0       	rcall	.+288    	; 0x17a <main>
  5a:	ec c0       	rjmp	.+472    	; 0x234 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);			/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);			/* Command of first row and required position<16 */
	LCD_String(str);						/* Call LCD string function */
}
  5e:	95 b3       	in	r25, 0x15	; 21
  60:	9f 70       	andi	r25, 0x0F	; 15
  62:	28 2f       	mov	r18, r24
  64:	20 7f       	andi	r18, 0xF0	; 240
  66:	92 2b       	or	r25, r18
  68:	95 bb       	out	0x15, r25	; 21
  6a:	a8 98       	cbi	0x15, 0	; 21
  6c:	a9 9a       	sbi	0x15, 1	; 21
  6e:	35 e0       	ldi	r19, 0x05	; 5
  70:	3a 95       	dec	r19
  72:	f1 f7       	brne	.-4      	; 0x70 <LCD_Command+0x12>
  74:	00 00       	nop
  76:	a9 98       	cbi	0x15, 1	; 21
  78:	ef e1       	ldi	r30, 0x1F	; 31
  7a:	f3 e0       	ldi	r31, 0x03	; 3
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <LCD_Command+0x1e>
  80:	00 c0       	rjmp	.+0      	; 0x82 <LCD_Command+0x24>
  82:	00 00       	nop
  84:	25 b3       	in	r18, 0x15	; 21
  86:	2f 70       	andi	r18, 0x0F	; 15
  88:	f0 e1       	ldi	r31, 0x10	; 16
  8a:	8f 9f       	mul	r24, r31
  8c:	c0 01       	movw	r24, r0
  8e:	11 24       	eor	r1, r1
  90:	82 2b       	or	r24, r18
  92:	85 bb       	out	0x15, r24	; 21
  94:	a9 9a       	sbi	0x15, 1	; 21
  96:	35 e0       	ldi	r19, 0x05	; 5
  98:	3a 95       	dec	r19
  9a:	f1 f7       	brne	.-4      	; 0x98 <LCD_Command+0x3a>
  9c:	00 00       	nop
  9e:	a9 98       	cbi	0x15, 1	; 21
  a0:	8f e3       	ldi	r24, 0x3F	; 63
  a2:	9f e1       	ldi	r25, 0x1F	; 31
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_Command+0x46>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_Command+0x4c>
  aa:	00 00       	nop
  ac:	08 95       	ret

000000ae <LCD_Char>:
  ae:	95 b3       	in	r25, 0x15	; 21
  b0:	9f 70       	andi	r25, 0x0F	; 15
  b2:	28 2f       	mov	r18, r24
  b4:	20 7f       	andi	r18, 0xF0	; 240
  b6:	92 2b       	or	r25, r18
  b8:	95 bb       	out	0x15, r25	; 21
  ba:	a8 9a       	sbi	0x15, 0	; 21
  bc:	a9 9a       	sbi	0x15, 1	; 21
  be:	35 e0       	ldi	r19, 0x05	; 5
  c0:	3a 95       	dec	r19
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_Char+0x12>
  c4:	00 00       	nop
  c6:	a9 98       	cbi	0x15, 1	; 21
  c8:	ef e1       	ldi	r30, 0x1F	; 31
  ca:	f3 e0       	ldi	r31, 0x03	; 3
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Char+0x1e>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_Char+0x24>
  d2:	00 00       	nop
  d4:	25 b3       	in	r18, 0x15	; 21
  d6:	2f 70       	andi	r18, 0x0F	; 15
  d8:	f0 e1       	ldi	r31, 0x10	; 16
  da:	8f 9f       	mul	r24, r31
  dc:	c0 01       	movw	r24, r0
  de:	11 24       	eor	r1, r1
  e0:	82 2b       	or	r24, r18
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	a9 9a       	sbi	0x15, 1	; 21
  e6:	35 e0       	ldi	r19, 0x05	; 5
  e8:	3a 95       	dec	r19
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Char+0x3a>
  ec:	00 00       	nop
  ee:	a9 98       	cbi	0x15, 1	; 21
  f0:	8f e3       	ldi	r24, 0x3F	; 63
  f2:	9f e1       	ldi	r25, 0x1F	; 31
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_Char+0x46>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_Char+0x4c>
  fa:	00 00       	nop
  fc:	08 95       	ret

000000fe <LCD_Init>:
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	84 bb       	out	0x14, r24	; 20
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	89 ef       	ldi	r24, 0xF9	; 249
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <LCD_Init+0xa>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_Init+0x14>
 112:	00 00       	nop
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	a3 df       	rcall	.-186    	; 0x5e <LCD_Command>
 118:	88 e2       	ldi	r24, 0x28	; 40
 11a:	a1 df       	rcall	.-190    	; 0x5e <LCD_Command>
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	9f df       	rcall	.-194    	; 0x5e <LCD_Command>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	9d df       	rcall	.-198    	; 0x5e <LCD_Command>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	9b df       	rcall	.-202    	; 0x5e <LCD_Command>
 128:	8f e3       	ldi	r24, 0x3F	; 63
 12a:	9f e1       	ldi	r25, 0x1F	; 31
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_Init+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_Init+0x34>
 132:	00 00       	nop
 134:	08 95       	ret

00000136 <LCD_String>:
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
 13c:	88 81       	ld	r24, Y
 13e:	88 23       	and	r24, r24
 140:	29 f0       	breq	.+10     	; 0x14c <LCD_String+0x16>
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	b4 df       	rcall	.-152    	; 0xae <LCD_Char>
 146:	89 91       	ld	r24, Y+
 148:	81 11       	cpse	r24, r1
 14a:	fc cf       	rjmp	.-8      	; 0x144 <LCD_String+0xe>
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	84 df       	rcall	.-248    	; 0x5e <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	8f e3       	ldi	r24, 0x3F	; 63
 158:	9f e1       	ldi	r25, 0x1F	; 31
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Clear+0x8>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Clear+0xe>
 160:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	7c df       	rcall	.-264    	; 0x5e <LCD_Command>
 166:	08 95       	ret

00000168 <UART_Init>:
	}
}

void UART_Init()
{
	UBRRL = 102;
 168:	86 e6       	ldi	r24, 0x66	; 102
 16a:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
 16c:	8a b1       	in	r24, 0x0a	; 10
 16e:	88 69       	ori	r24, 0x98	; 152
 170:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
 172:	80 b5       	in	r24, 0x20	; 32
 174:	86 60       	ori	r24, 0x06	; 6
 176:	80 bd       	out	0x20, r24	; 32
 178:	08 95       	ret

0000017a <main>:
void UART_Init(void);
char UART_Read(void);

int main(void)
{
	LCD_Init();
 17a:	c1 df       	rcall	.-126    	; 0xfe <LCD_Init>
	UART_Init();
 17c:	f5 df       	rcall	.-22     	; 0x168 <UART_Init>
	LCD_Clear();
 17e:	e9 df       	rcall	.-46     	; 0x152 <LCD_Clear>
	LCD_String("Data_IN");
 180:	80 e6       	ldi	r24, 0x60	; 96
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	d8 df       	rcall	.-80     	; 0x136 <LCD_String>
	
	sei();
 186:	78 94       	sei
 188:	ff cf       	rjmp	.-2      	; 0x188 <main+0xe>

0000018a <UART_Read>:
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
}

char UART_Read()
{
	while(bit_is_clear(UCSRA, RXC));
 18a:	5f 9b       	sbis	0x0b, 7	; 11
 18c:	fe cf       	rjmp	.-4      	; 0x18a <UART_Read>
	return UDR;
 18e:	8c b1       	in	r24, 0x0c	; 12
}
 190:	08 95       	ret

00000192 <__vector_11>:
    {
    }
}

ISR(USART_RXC_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	if (count == 0)
 1b4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1b8:	81 11       	cpse	r24, r1
 1ba:	0c c0       	rjmp	.+24     	; 0x1d4 <__vector_11+0x42>
	{
		if (UART_Read() == '$')
 1bc:	e6 df       	rcall	.-52     	; 0x18a <UART_Read>
 1be:	84 32       	cpi	r24, 0x24	; 36
 1c0:	31 f4       	brne	.+12     	; 0x1ce <__vector_11+0x3c>
		{
			count++;
 1c2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <__vector_11+0x42>
		} 
		else
		{
			count = 0;
 1ce:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 1d2:	1f c0       	rjmp	.+62     	; 0x212 <__vector_11+0x80>
		}
	}
	if (count == 1)
 1d4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	41 f4       	brne	.+16     	; 0x1ec <__vector_11+0x5a>
	{
		data = UART_Read();
 1dc:	d6 df       	rcall	.-84     	; 0x18a <UART_Read>
 1de:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <data>
		count++;
 1e2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
	}
	if (count == 2)
 1ec:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	79 f4       	brne	.+30     	; 0x212 <__vector_11+0x80>
	{
		invdata = UART_Read();
 1f4:	ca df       	rcall	.-108    	; 0x18a <UART_Read>
 1f6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <invdata>
		if ((data | invdata) == 0xFF)
 1fa:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <data>
 1fe:	89 2b       	or	r24, r25
 200:	8f 3f       	cpi	r24, 0xFF	; 255
 202:	29 f4       	brne	.+10     	; 0x20e <__vector_11+0x7c>
		{
			LCD_Command(0xC0);
 204:	80 ec       	ldi	r24, 0xC0	; 192
 206:	2b df       	rcall	.-426    	; 0x5e <LCD_Command>
			LCD_Char(data);
 208:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <data>
 20c:	50 df       	rcall	.-352    	; 0xae <LCD_Char>
		}
	count = 0;
 20e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
	}
}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
