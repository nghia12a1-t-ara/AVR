
SPI_Slave_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000814  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000814  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000090c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd7  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072f  00000000  00000000  00001597  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f6  00000000  00000000  00001cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000021bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000540  00000000  00000000  0000265b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002b9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  7a:	0c 94 08 04 	jmp	0x810	; 0x810 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:
#include "PORT_4.h"
#include "LCD_4.h"

void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);	/* sending upper nibble */
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	92 bb       	out	0x12, r25	; 18
	LCD_Port &= ~ (1<<RS);							/* RS=0, command reg. */
  8e:	90 98       	cbi	0x12, 0	; 18
	LCD_Port |= (1<<EN);							/* Enable pulse */
  90:	91 9a       	sbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	35 e0       	ldi	r19, 0x05	; 5
  94:	3a 95       	dec	r19
  96:	f1 f7       	brne	.-4      	; 0x94 <LCD_Command+0x12>
  98:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  9a:	91 98       	cbi	0x12, 1	; 18
  9c:	ef e1       	ldi	r30, 0x1F	; 31
  9e:	f3 e0       	ldi	r31, 0x03	; 3
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_Command+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_Command+0x24>
  a6:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);		/* sending lower nibble */
  a8:	22 b3       	in	r18, 0x12	; 18
  aa:	2f 70       	andi	r18, 0x0F	; 15
  ac:	f0 e1       	ldi	r31, 0x10	; 16
  ae:	8f 9f       	mul	r24, r31
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	82 2b       	or	r24, r18
  b6:	82 bb       	out	0x12, r24	; 18
	LCD_Port |= (1<<EN);
  b8:	91 9a       	sbi	0x12, 1	; 18
  ba:	35 e0       	ldi	r19, 0x05	; 5
  bc:	3a 95       	dec	r19
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_Command+0x3a>
  c0:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  c2:	91 98       	cbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e3       	ldi	r24, 0x3F	; 63
  c6:	9f e1       	ldi	r25, 0x1F	; 31
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCD_Command+0x46>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCD_Command+0x4c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <LCD_Char>:
	_delay_ms(2);
}

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);	/* sending upper nibble */
  d2:	92 b3       	in	r25, 0x12	; 18
  d4:	9f 70       	andi	r25, 0x0F	; 15
  d6:	28 2f       	mov	r18, r24
  d8:	20 7f       	andi	r18, 0xF0	; 240
  da:	92 2b       	or	r25, r18
  dc:	92 bb       	out	0x12, r25	; 18
	LCD_Port |= (1<<RS);							/* RS=1, data reg. */
  de:	90 9a       	sbi	0x12, 0	; 18
	LCD_Port|= (1<<EN);
  e0:	91 9a       	sbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	35 e0       	ldi	r19, 0x05	; 5
  e4:	3a 95       	dec	r19
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_Char+0x12>
  e8:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  ea:	91 98       	cbi	0x12, 1	; 18
  ec:	ef e1       	ldi	r30, 0x1F	; 31
  ee:	f3 e0       	ldi	r31, 0x03	; 3
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_Char+0x1e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_Char+0x24>
  f6:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);		/* sending lower nibble */
  f8:	22 b3       	in	r18, 0x12	; 18
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	f0 e1       	ldi	r31, 0x10	; 16
  fe:	8f 9f       	mul	r24, r31
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	82 2b       	or	r24, r18
 106:	82 bb       	out	0x12, r24	; 18
	LCD_Port |= (1<<EN);
 108:	91 9a       	sbi	0x12, 1	; 18
 10a:	35 e0       	ldi	r19, 0x05	; 5
 10c:	3a 95       	dec	r19
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_Char+0x3a>
 110:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 112:	91 98       	cbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f e3       	ldi	r24, 0x3F	; 63
 116:	9f e1       	ldi	r25, 0x1F	; 31
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Char+0x46>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_Char+0x4c>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	81 bb       	out	0x11, r24	; 17
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	89 ef       	ldi	r24, 0xF9	; 249
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <LCD_Init+0xa>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_Init+0x14>
 136:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 156:	8f e3       	ldi	r24, 0x3F	; 63
 158:	9f e1       	ldi	r25, 0x1F	; 31
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Init+0x38>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Init+0x3e>
 160:	00 00       	nop
 162:	08 95       	ret

00000164 <LCD_String>:
	_delay_ms(2);
}

void LCD_String (char *str)		/* Send string to LCD function */
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 16a:	88 81       	ld	r24, Y
 16c:	88 23       	and	r24, r24
 16e:	31 f0       	breq	.+12     	; 0x17c <LCD_String+0x18>
 170:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);
 172:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 176:	89 91       	ld	r24, Y+
 178:	81 11       	cpse	r24, r1
 17a:	fb cf       	rjmp	.-10     	; 0x172 <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)		/* Send string to LCD with xy position */
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 188:	81 11       	cpse	r24, r1
 18a:	08 c0       	rjmp	.+16     	; 0x19c <LCD_String_xy+0x1a>
 18c:	60 31       	cpi	r22, 0x10	; 16
 18e:	78 f4       	brcc	.+30     	; 0x1ae <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);			/* Command of first row and required position<16 */
 190:	86 2f       	mov	r24, r22
 192:	8f 70       	andi	r24, 0x0F	; 15
 194:	80 68       	ori	r24, 0x80	; 128
 196:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 19a:	09 c0       	rjmp	.+18     	; 0x1ae <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	39 f4       	brne	.+14     	; 0x1ae <LCD_String_xy+0x2c>
 1a0:	60 31       	cpi	r22, 0x10	; 16
 1a2:	28 f4       	brcc	.+10     	; 0x1ae <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);			/* Command of first row and required position<16 */
 1a4:	86 2f       	mov	r24, r22
 1a6:	8f 70       	andi	r24, 0x0F	; 15
 1a8:	80 6c       	ori	r24, 0xC0	; 192
 1aa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_String(str);						/* Call LCD string function */
 1ae:	ce 01       	movw	r24, r28
 1b0:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_String>
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <SPI_Slave_Init>:
    }
}

void SPI_Slave_Init()		
{
	DDRB &= ~((1 << MOSI) | (1 << SCK) | (1 << SS));  /* MOSI, SCK, SS = Input */			
 1ba:	87 b3       	in	r24, 0x17	; 23
 1bc:	8f 74       	andi	r24, 0x4F	; 79
 1be:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << MISO);			/* MISO = Output */
 1c0:	be 9a       	sbi	0x17, 6	; 23
	SPCR = (1 << SPE);			/* Enable SPI, slave mode*/
 1c2:	80 e4       	ldi	r24, 0x40	; 64
 1c4:	8d b9       	out	0x0d, r24	; 13
 1c6:	08 95       	ret

000001c8 <SPI_Slave_Receive>:
}

char SPI_Slave_Receive()			
{
	while(!(SPSR & (1<<SPIF)));	/* Doi nhan xong */
 1c8:	77 9b       	sbis	0x0e, 7	; 14
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <SPI_Slave_Receive>
	return(SPDR);				/* Doc gia tri thanh ghi du lieu */
 1cc:	8f b1       	in	r24, 0x0f	; 15
}
 1ce:	08 95       	ret

000001d0 <main>:

void SPI_Slave_Init(void);
char SPI_Slave_Receive(void);

int main(void)
{
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <main+0x6>
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <main+0x8>
 1d8:	1f 92       	push	r1
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
    uint8_t count;
    char buffer[5];
    
    LCD_Init();
 1de:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Init>
    SPI_Slave_Init();
 1e2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <SPI_Slave_Init>
    
    LCD_String_xy(0, 0, "Slave Device");
 1e6:	40 e6       	ldi	r20, 0x60	; 96
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_String_xy>
    LCD_String_xy(1, 0, "Receive Data:    ");
 1f2:	4d e6       	ldi	r20, 0x6D	; 109
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_String_xy>
	
    while (1) 
    {
		count = SPI_Slave_Receive();
		sprintf(buffer, "%d   ", count);
 1fe:	0f 2e       	mov	r0, r31
 200:	ff e7       	ldi	r31, 0x7F	; 127
 202:	ef 2e       	mov	r14, r31
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ff 2e       	mov	r15, r31
 208:	f0 2d       	mov	r31, r0
 20a:	8e 01       	movw	r16, r28
 20c:	0f 5f       	subi	r16, 0xFF	; 255
 20e:	1f 4f       	sbci	r17, 0xFF	; 255
    LCD_String_xy(0, 0, "Slave Device");
    LCD_String_xy(1, 0, "Receive Data:    ");
	
    while (1) 
    {
		count = SPI_Slave_Receive();
 210:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <SPI_Slave_Receive>
		sprintf(buffer, "%d   ", count);
 214:	1f 92       	push	r1
 216:	8f 93       	push	r24
 218:	ff 92       	push	r15
 21a:	ef 92       	push	r14
 21c:	1f 93       	push	r17
 21e:	0f 93       	push	r16
 220:	0e 94 1e 01 	call	0x23c	; 0x23c <sprintf>
		LCD_String_xy(1, 13, buffer);
 224:	a8 01       	movw	r20, r16
 226:	6d e0       	ldi	r22, 0x0D	; 13
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_String_xy>
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	ea cf       	rjmp	.-44     	; 0x210 <main+0x40>

0000023c <sprintf>:
 23c:	ae e0       	ldi	r26, 0x0E	; 14
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	e4 e2       	ldi	r30, 0x24	; 36
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	0c 94 df 03 	jmp	0x7be	; 0x7be <__prologue_saves__+0x1c>
 248:	0d 89       	ldd	r16, Y+21	; 0x15
 24a:	1e 89       	ldd	r17, Y+22	; 0x16
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	8c 83       	std	Y+4, r24	; 0x04
 250:	1a 83       	std	Y+2, r17	; 0x02
 252:	09 83       	std	Y+1, r16	; 0x01
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	9f e7       	ldi	r25, 0x7F	; 127
 258:	9e 83       	std	Y+6, r25	; 0x06
 25a:	8d 83       	std	Y+5, r24	; 0x05
 25c:	ae 01       	movw	r20, r28
 25e:	47 5e       	subi	r20, 0xE7	; 231
 260:	5f 4f       	sbci	r21, 0xFF	; 255
 262:	6f 89       	ldd	r22, Y+23	; 0x17
 264:	78 8d       	ldd	r23, Y+24	; 0x18
 266:	ce 01       	movw	r24, r28
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	0e 94 40 01 	call	0x280	; 0x280 <vfprintf>
 26e:	ef 81       	ldd	r30, Y+7	; 0x07
 270:	f8 85       	ldd	r31, Y+8	; 0x08
 272:	e0 0f       	add	r30, r16
 274:	f1 1f       	adc	r31, r17
 276:	10 82       	st	Z, r1
 278:	2e 96       	adiw	r28, 0x0e	; 14
 27a:	e4 e0       	ldi	r30, 0x04	; 4
 27c:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__epilogue_restores__+0x1c>

00000280 <vfprintf>:
 280:	ab e0       	ldi	r26, 0x0B	; 11
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	e6 e4       	ldi	r30, 0x46	; 70
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__prologue_saves__>
 28c:	6c 01       	movw	r12, r24
 28e:	7b 01       	movw	r14, r22
 290:	8a 01       	movw	r16, r20
 292:	fc 01       	movw	r30, r24
 294:	17 82       	std	Z+7, r1	; 0x07
 296:	16 82       	std	Z+6, r1	; 0x06
 298:	83 81       	ldd	r24, Z+3	; 0x03
 29a:	81 ff       	sbrs	r24, 1
 29c:	cc c1       	rjmp	.+920    	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
 29e:	ce 01       	movw	r24, r28
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	3c 01       	movw	r6, r24
 2a4:	f6 01       	movw	r30, r12
 2a6:	93 81       	ldd	r25, Z+3	; 0x03
 2a8:	f7 01       	movw	r30, r14
 2aa:	93 fd       	sbrc	r25, 3
 2ac:	85 91       	lpm	r24, Z+
 2ae:	93 ff       	sbrs	r25, 3
 2b0:	81 91       	ld	r24, Z+
 2b2:	7f 01       	movw	r14, r30
 2b4:	88 23       	and	r24, r24
 2b6:	09 f4       	brne	.+2      	; 0x2ba <vfprintf+0x3a>
 2b8:	ba c1       	rjmp	.+884    	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 2ba:	85 32       	cpi	r24, 0x25	; 37
 2bc:	39 f4       	brne	.+14     	; 0x2cc <vfprintf+0x4c>
 2be:	93 fd       	sbrc	r25, 3
 2c0:	85 91       	lpm	r24, Z+
 2c2:	93 ff       	sbrs	r25, 3
 2c4:	81 91       	ld	r24, Z+
 2c6:	7f 01       	movw	r14, r30
 2c8:	85 32       	cpi	r24, 0x25	; 37
 2ca:	29 f4       	brne	.+10     	; 0x2d6 <vfprintf+0x56>
 2cc:	b6 01       	movw	r22, r12
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 37 03 	call	0x66e	; 0x66e <fputc>
 2d4:	e7 cf       	rjmp	.-50     	; 0x2a4 <vfprintf+0x24>
 2d6:	91 2c       	mov	r9, r1
 2d8:	21 2c       	mov	r2, r1
 2da:	31 2c       	mov	r3, r1
 2dc:	ff e1       	ldi	r31, 0x1F	; 31
 2de:	f3 15       	cp	r31, r3
 2e0:	d8 f0       	brcs	.+54     	; 0x318 <vfprintf+0x98>
 2e2:	8b 32       	cpi	r24, 0x2B	; 43
 2e4:	79 f0       	breq	.+30     	; 0x304 <vfprintf+0x84>
 2e6:	38 f4       	brcc	.+14     	; 0x2f6 <vfprintf+0x76>
 2e8:	80 32       	cpi	r24, 0x20	; 32
 2ea:	79 f0       	breq	.+30     	; 0x30a <vfprintf+0x8a>
 2ec:	83 32       	cpi	r24, 0x23	; 35
 2ee:	a1 f4       	brne	.+40     	; 0x318 <vfprintf+0x98>
 2f0:	23 2d       	mov	r18, r3
 2f2:	20 61       	ori	r18, 0x10	; 16
 2f4:	1d c0       	rjmp	.+58     	; 0x330 <vfprintf+0xb0>
 2f6:	8d 32       	cpi	r24, 0x2D	; 45
 2f8:	61 f0       	breq	.+24     	; 0x312 <vfprintf+0x92>
 2fa:	80 33       	cpi	r24, 0x30	; 48
 2fc:	69 f4       	brne	.+26     	; 0x318 <vfprintf+0x98>
 2fe:	23 2d       	mov	r18, r3
 300:	21 60       	ori	r18, 0x01	; 1
 302:	16 c0       	rjmp	.+44     	; 0x330 <vfprintf+0xb0>
 304:	83 2d       	mov	r24, r3
 306:	82 60       	ori	r24, 0x02	; 2
 308:	38 2e       	mov	r3, r24
 30a:	e3 2d       	mov	r30, r3
 30c:	e4 60       	ori	r30, 0x04	; 4
 30e:	3e 2e       	mov	r3, r30
 310:	2a c0       	rjmp	.+84     	; 0x366 <vfprintf+0xe6>
 312:	f3 2d       	mov	r31, r3
 314:	f8 60       	ori	r31, 0x08	; 8
 316:	1d c0       	rjmp	.+58     	; 0x352 <vfprintf+0xd2>
 318:	37 fc       	sbrc	r3, 7
 31a:	2d c0       	rjmp	.+90     	; 0x376 <vfprintf+0xf6>
 31c:	20 ed       	ldi	r18, 0xD0	; 208
 31e:	28 0f       	add	r18, r24
 320:	2a 30       	cpi	r18, 0x0A	; 10
 322:	40 f0       	brcs	.+16     	; 0x334 <vfprintf+0xb4>
 324:	8e 32       	cpi	r24, 0x2E	; 46
 326:	b9 f4       	brne	.+46     	; 0x356 <vfprintf+0xd6>
 328:	36 fc       	sbrc	r3, 6
 32a:	81 c1       	rjmp	.+770    	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 32c:	23 2d       	mov	r18, r3
 32e:	20 64       	ori	r18, 0x40	; 64
 330:	32 2e       	mov	r3, r18
 332:	19 c0       	rjmp	.+50     	; 0x366 <vfprintf+0xe6>
 334:	36 fe       	sbrs	r3, 6
 336:	06 c0       	rjmp	.+12     	; 0x344 <vfprintf+0xc4>
 338:	8a e0       	ldi	r24, 0x0A	; 10
 33a:	98 9e       	mul	r9, r24
 33c:	20 0d       	add	r18, r0
 33e:	11 24       	eor	r1, r1
 340:	92 2e       	mov	r9, r18
 342:	11 c0       	rjmp	.+34     	; 0x366 <vfprintf+0xe6>
 344:	ea e0       	ldi	r30, 0x0A	; 10
 346:	2e 9e       	mul	r2, r30
 348:	20 0d       	add	r18, r0
 34a:	11 24       	eor	r1, r1
 34c:	22 2e       	mov	r2, r18
 34e:	f3 2d       	mov	r31, r3
 350:	f0 62       	ori	r31, 0x20	; 32
 352:	3f 2e       	mov	r3, r31
 354:	08 c0       	rjmp	.+16     	; 0x366 <vfprintf+0xe6>
 356:	8c 36       	cpi	r24, 0x6C	; 108
 358:	21 f4       	brne	.+8      	; 0x362 <vfprintf+0xe2>
 35a:	83 2d       	mov	r24, r3
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	38 2e       	mov	r3, r24
 360:	02 c0       	rjmp	.+4      	; 0x366 <vfprintf+0xe6>
 362:	88 36       	cpi	r24, 0x68	; 104
 364:	41 f4       	brne	.+16     	; 0x376 <vfprintf+0xf6>
 366:	f7 01       	movw	r30, r14
 368:	93 fd       	sbrc	r25, 3
 36a:	85 91       	lpm	r24, Z+
 36c:	93 ff       	sbrs	r25, 3
 36e:	81 91       	ld	r24, Z+
 370:	7f 01       	movw	r14, r30
 372:	81 11       	cpse	r24, r1
 374:	b3 cf       	rjmp	.-154    	; 0x2dc <vfprintf+0x5c>
 376:	98 2f       	mov	r25, r24
 378:	9f 7d       	andi	r25, 0xDF	; 223
 37a:	95 54       	subi	r25, 0x45	; 69
 37c:	93 30       	cpi	r25, 0x03	; 3
 37e:	28 f4       	brcc	.+10     	; 0x38a <vfprintf+0x10a>
 380:	0c 5f       	subi	r16, 0xFC	; 252
 382:	1f 4f       	sbci	r17, 0xFF	; 255
 384:	9f e3       	ldi	r25, 0x3F	; 63
 386:	99 83       	std	Y+1, r25	; 0x01
 388:	0d c0       	rjmp	.+26     	; 0x3a4 <vfprintf+0x124>
 38a:	83 36       	cpi	r24, 0x63	; 99
 38c:	31 f0       	breq	.+12     	; 0x39a <vfprintf+0x11a>
 38e:	83 37       	cpi	r24, 0x73	; 115
 390:	71 f0       	breq	.+28     	; 0x3ae <vfprintf+0x12e>
 392:	83 35       	cpi	r24, 0x53	; 83
 394:	09 f0       	breq	.+2      	; 0x398 <vfprintf+0x118>
 396:	59 c0       	rjmp	.+178    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 398:	21 c0       	rjmp	.+66     	; 0x3dc <vfprintf+0x15c>
 39a:	f8 01       	movw	r30, r16
 39c:	80 81       	ld	r24, Z
 39e:	89 83       	std	Y+1, r24	; 0x01
 3a0:	0e 5f       	subi	r16, 0xFE	; 254
 3a2:	1f 4f       	sbci	r17, 0xFF	; 255
 3a4:	88 24       	eor	r8, r8
 3a6:	83 94       	inc	r8
 3a8:	91 2c       	mov	r9, r1
 3aa:	53 01       	movw	r10, r6
 3ac:	13 c0       	rjmp	.+38     	; 0x3d4 <vfprintf+0x154>
 3ae:	28 01       	movw	r4, r16
 3b0:	f2 e0       	ldi	r31, 0x02	; 2
 3b2:	4f 0e       	add	r4, r31
 3b4:	51 1c       	adc	r5, r1
 3b6:	f8 01       	movw	r30, r16
 3b8:	a0 80       	ld	r10, Z
 3ba:	b1 80       	ldd	r11, Z+1	; 0x01
 3bc:	36 fe       	sbrs	r3, 6
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <vfprintf+0x146>
 3c0:	69 2d       	mov	r22, r9
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <vfprintf+0x14a>
 3c6:	6f ef       	ldi	r22, 0xFF	; 255
 3c8:	7f ef       	ldi	r23, 0xFF	; 255
 3ca:	c5 01       	movw	r24, r10
 3cc:	0e 94 2c 03 	call	0x658	; 0x658 <strnlen>
 3d0:	4c 01       	movw	r8, r24
 3d2:	82 01       	movw	r16, r4
 3d4:	f3 2d       	mov	r31, r3
 3d6:	ff 77       	andi	r31, 0x7F	; 127
 3d8:	3f 2e       	mov	r3, r31
 3da:	16 c0       	rjmp	.+44     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3dc:	28 01       	movw	r4, r16
 3de:	22 e0       	ldi	r18, 0x02	; 2
 3e0:	42 0e       	add	r4, r18
 3e2:	51 1c       	adc	r5, r1
 3e4:	f8 01       	movw	r30, r16
 3e6:	a0 80       	ld	r10, Z
 3e8:	b1 80       	ldd	r11, Z+1	; 0x01
 3ea:	36 fe       	sbrs	r3, 6
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <vfprintf+0x174>
 3ee:	69 2d       	mov	r22, r9
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <vfprintf+0x178>
 3f4:	6f ef       	ldi	r22, 0xFF	; 255
 3f6:	7f ef       	ldi	r23, 0xFF	; 255
 3f8:	c5 01       	movw	r24, r10
 3fa:	0e 94 21 03 	call	0x642	; 0x642 <strnlen_P>
 3fe:	4c 01       	movw	r8, r24
 400:	f3 2d       	mov	r31, r3
 402:	f0 68       	ori	r31, 0x80	; 128
 404:	3f 2e       	mov	r3, r31
 406:	82 01       	movw	r16, r4
 408:	33 fc       	sbrc	r3, 3
 40a:	1b c0       	rjmp	.+54     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 40c:	82 2d       	mov	r24, r2
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	88 16       	cp	r8, r24
 412:	99 06       	cpc	r9, r25
 414:	b0 f4       	brcc	.+44     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 416:	b6 01       	movw	r22, r12
 418:	80 e2       	ldi	r24, 0x20	; 32
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 37 03 	call	0x66e	; 0x66e <fputc>
 420:	2a 94       	dec	r2
 422:	f4 cf       	rjmp	.-24     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 424:	f5 01       	movw	r30, r10
 426:	37 fc       	sbrc	r3, 7
 428:	85 91       	lpm	r24, Z+
 42a:	37 fe       	sbrs	r3, 7
 42c:	81 91       	ld	r24, Z+
 42e:	5f 01       	movw	r10, r30
 430:	b6 01       	movw	r22, r12
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 37 03 	call	0x66e	; 0x66e <fputc>
 438:	21 10       	cpse	r2, r1
 43a:	2a 94       	dec	r2
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	82 1a       	sub	r8, r18
 440:	91 08       	sbc	r9, r1
 442:	81 14       	cp	r8, r1
 444:	91 04       	cpc	r9, r1
 446:	71 f7       	brne	.-36     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 448:	e8 c0       	rjmp	.+464    	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 44a:	84 36       	cpi	r24, 0x64	; 100
 44c:	11 f0       	breq	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	89 36       	cpi	r24, 0x69	; 105
 450:	41 f5       	brne	.+80     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 452:	f8 01       	movw	r30, r16
 454:	37 fe       	sbrs	r3, 7
 456:	07 c0       	rjmp	.+14     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 458:	60 81       	ld	r22, Z
 45a:	71 81       	ldd	r23, Z+1	; 0x01
 45c:	82 81       	ldd	r24, Z+2	; 0x02
 45e:	93 81       	ldd	r25, Z+3	; 0x03
 460:	0c 5f       	subi	r16, 0xFC	; 252
 462:	1f 4f       	sbci	r17, 0xFF	; 255
 464:	08 c0       	rjmp	.+16     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 466:	60 81       	ld	r22, Z
 468:	71 81       	ldd	r23, Z+1	; 0x01
 46a:	07 2e       	mov	r0, r23
 46c:	00 0c       	add	r0, r0
 46e:	88 0b       	sbc	r24, r24
 470:	99 0b       	sbc	r25, r25
 472:	0e 5f       	subi	r16, 0xFE	; 254
 474:	1f 4f       	sbci	r17, 0xFF	; 255
 476:	f3 2d       	mov	r31, r3
 478:	ff 76       	andi	r31, 0x6F	; 111
 47a:	3f 2e       	mov	r3, r31
 47c:	97 ff       	sbrs	r25, 7
 47e:	09 c0       	rjmp	.+18     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 480:	90 95       	com	r25
 482:	80 95       	com	r24
 484:	70 95       	com	r23
 486:	61 95       	neg	r22
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	8f 4f       	sbci	r24, 0xFF	; 255
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	f0 68       	ori	r31, 0x80	; 128
 490:	3f 2e       	mov	r3, r31
 492:	2a e0       	ldi	r18, 0x0A	; 10
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	a3 01       	movw	r20, r6
 498:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__ultoa_invert>
 49c:	88 2e       	mov	r8, r24
 49e:	86 18       	sub	r8, r6
 4a0:	45 c0       	rjmp	.+138    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 4a2:	85 37       	cpi	r24, 0x75	; 117
 4a4:	31 f4       	brne	.+12     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4a6:	23 2d       	mov	r18, r3
 4a8:	2f 7e       	andi	r18, 0xEF	; 239
 4aa:	b2 2e       	mov	r11, r18
 4ac:	2a e0       	ldi	r18, 0x0A	; 10
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	25 c0       	rjmp	.+74     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4b2:	93 2d       	mov	r25, r3
 4b4:	99 7f       	andi	r25, 0xF9	; 249
 4b6:	b9 2e       	mov	r11, r25
 4b8:	8f 36       	cpi	r24, 0x6F	; 111
 4ba:	c1 f0       	breq	.+48     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4bc:	18 f4       	brcc	.+6      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4be:	88 35       	cpi	r24, 0x58	; 88
 4c0:	79 f0       	breq	.+30     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4c2:	b5 c0       	rjmp	.+362    	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 4c4:	80 37       	cpi	r24, 0x70	; 112
 4c6:	19 f0       	breq	.+6      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4c8:	88 37       	cpi	r24, 0x78	; 120
 4ca:	21 f0       	breq	.+8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4cc:	b0 c0       	rjmp	.+352    	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
 4ce:	e9 2f       	mov	r30, r25
 4d0:	e0 61       	ori	r30, 0x10	; 16
 4d2:	be 2e       	mov	r11, r30
 4d4:	b4 fe       	sbrs	r11, 4
 4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4d8:	fb 2d       	mov	r31, r11
 4da:	f4 60       	ori	r31, 0x04	; 4
 4dc:	bf 2e       	mov	r11, r31
 4de:	09 c0       	rjmp	.+18     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4e0:	34 fe       	sbrs	r3, 4
 4e2:	0a c0       	rjmp	.+20     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4e4:	29 2f       	mov	r18, r25
 4e6:	26 60       	ori	r18, 0x06	; 6
 4e8:	b2 2e       	mov	r11, r18
 4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4ec:	28 e0       	ldi	r18, 0x08	; 8
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f2:	20 e1       	ldi	r18, 0x10	; 16
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4f8:	20 e1       	ldi	r18, 0x10	; 16
 4fa:	32 e0       	ldi	r19, 0x02	; 2
 4fc:	f8 01       	movw	r30, r16
 4fe:	b7 fe       	sbrs	r11, 7
 500:	07 c0       	rjmp	.+14     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 502:	60 81       	ld	r22, Z
 504:	71 81       	ldd	r23, Z+1	; 0x01
 506:	82 81       	ldd	r24, Z+2	; 0x02
 508:	93 81       	ldd	r25, Z+3	; 0x03
 50a:	0c 5f       	subi	r16, 0xFC	; 252
 50c:	1f 4f       	sbci	r17, 0xFF	; 255
 50e:	06 c0       	rjmp	.+12     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 510:	60 81       	ld	r22, Z
 512:	71 81       	ldd	r23, Z+1	; 0x01
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 5f       	subi	r16, 0xFE	; 254
 51a:	1f 4f       	sbci	r17, 0xFF	; 255
 51c:	a3 01       	movw	r20, r6
 51e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__ultoa_invert>
 522:	88 2e       	mov	r8, r24
 524:	86 18       	sub	r8, r6
 526:	fb 2d       	mov	r31, r11
 528:	ff 77       	andi	r31, 0x7F	; 127
 52a:	3f 2e       	mov	r3, r31
 52c:	36 fe       	sbrs	r3, 6
 52e:	0d c0       	rjmp	.+26     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 530:	23 2d       	mov	r18, r3
 532:	2e 7f       	andi	r18, 0xFE	; 254
 534:	a2 2e       	mov	r10, r18
 536:	89 14       	cp	r8, r9
 538:	58 f4       	brcc	.+22     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 53a:	34 fe       	sbrs	r3, 4
 53c:	0b c0       	rjmp	.+22     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 53e:	32 fc       	sbrc	r3, 2
 540:	09 c0       	rjmp	.+18     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 542:	83 2d       	mov	r24, r3
 544:	8e 7e       	andi	r24, 0xEE	; 238
 546:	a8 2e       	mov	r10, r24
 548:	05 c0       	rjmp	.+10     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 54a:	b8 2c       	mov	r11, r8
 54c:	a3 2c       	mov	r10, r3
 54e:	03 c0       	rjmp	.+6      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 550:	b8 2c       	mov	r11, r8
 552:	01 c0       	rjmp	.+2      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 554:	b9 2c       	mov	r11, r9
 556:	a4 fe       	sbrs	r10, 4
 558:	0f c0       	rjmp	.+30     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 55a:	fe 01       	movw	r30, r28
 55c:	e8 0d       	add	r30, r8
 55e:	f1 1d       	adc	r31, r1
 560:	80 81       	ld	r24, Z
 562:	80 33       	cpi	r24, 0x30	; 48
 564:	21 f4       	brne	.+8      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 566:	9a 2d       	mov	r25, r10
 568:	99 7e       	andi	r25, 0xE9	; 233
 56a:	a9 2e       	mov	r10, r25
 56c:	09 c0       	rjmp	.+18     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 56e:	a2 fe       	sbrs	r10, 2
 570:	06 c0       	rjmp	.+12     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 572:	b3 94       	inc	r11
 574:	b3 94       	inc	r11
 576:	04 c0       	rjmp	.+8      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 578:	8a 2d       	mov	r24, r10
 57a:	86 78       	andi	r24, 0x86	; 134
 57c:	09 f0       	breq	.+2      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 57e:	b3 94       	inc	r11
 580:	a3 fc       	sbrc	r10, 3
 582:	11 c0       	rjmp	.+34     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 584:	a0 fe       	sbrs	r10, 0
 586:	06 c0       	rjmp	.+12     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 588:	b2 14       	cp	r11, r2
 58a:	88 f4       	brcc	.+34     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 58c:	28 0c       	add	r2, r8
 58e:	92 2c       	mov	r9, r2
 590:	9b 18       	sub	r9, r11
 592:	0e c0       	rjmp	.+28     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 594:	b2 14       	cp	r11, r2
 596:	60 f4       	brcc	.+24     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 598:	b6 01       	movw	r22, r12
 59a:	80 e2       	ldi	r24, 0x20	; 32
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 37 03 	call	0x66e	; 0x66e <fputc>
 5a2:	b3 94       	inc	r11
 5a4:	f7 cf       	rjmp	.-18     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 5a6:	b2 14       	cp	r11, r2
 5a8:	18 f4       	brcc	.+6      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5aa:	2b 18       	sub	r2, r11
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5ae:	98 2c       	mov	r9, r8
 5b0:	21 2c       	mov	r2, r1
 5b2:	a4 fe       	sbrs	r10, 4
 5b4:	10 c0       	rjmp	.+32     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5b6:	b6 01       	movw	r22, r12
 5b8:	80 e3       	ldi	r24, 0x30	; 48
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 37 03 	call	0x66e	; 0x66e <fputc>
 5c0:	a2 fe       	sbrs	r10, 2
 5c2:	17 c0       	rjmp	.+46     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5c4:	a1 fc       	sbrc	r10, 1
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5c8:	88 e7       	ldi	r24, 0x78	; 120
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5ce:	88 e5       	ldi	r24, 0x58	; 88
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	b6 01       	movw	r22, r12
 5d4:	0c c0       	rjmp	.+24     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5d6:	8a 2d       	mov	r24, r10
 5d8:	86 78       	andi	r24, 0x86	; 134
 5da:	59 f0       	breq	.+22     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5dc:	a1 fe       	sbrs	r10, 1
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5e0:	8b e2       	ldi	r24, 0x2B	; 43
 5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5e4:	80 e2       	ldi	r24, 0x20	; 32
 5e6:	a7 fc       	sbrc	r10, 7
 5e8:	8d e2       	ldi	r24, 0x2D	; 45
 5ea:	b6 01       	movw	r22, r12
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 37 03 	call	0x66e	; 0x66e <fputc>
 5f2:	89 14       	cp	r8, r9
 5f4:	38 f4       	brcc	.+14     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5f6:	b6 01       	movw	r22, r12
 5f8:	80 e3       	ldi	r24, 0x30	; 48
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 37 03 	call	0x66e	; 0x66e <fputc>
 600:	9a 94       	dec	r9
 602:	f7 cf       	rjmp	.-18     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 604:	8a 94       	dec	r8
 606:	f3 01       	movw	r30, r6
 608:	e8 0d       	add	r30, r8
 60a:	f1 1d       	adc	r31, r1
 60c:	80 81       	ld	r24, Z
 60e:	b6 01       	movw	r22, r12
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 37 03 	call	0x66e	; 0x66e <fputc>
 616:	81 10       	cpse	r8, r1
 618:	f5 cf       	rjmp	.-22     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 61a:	22 20       	and	r2, r2
 61c:	09 f4       	brne	.+2      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 61e:	42 ce       	rjmp	.-892    	; 0x2a4 <vfprintf+0x24>
 620:	b6 01       	movw	r22, r12
 622:	80 e2       	ldi	r24, 0x20	; 32
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 37 03 	call	0x66e	; 0x66e <fputc>
 62a:	2a 94       	dec	r2
 62c:	f6 cf       	rjmp	.-20     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 62e:	f6 01       	movw	r30, r12
 630:	86 81       	ldd	r24, Z+6	; 0x06
 632:	97 81       	ldd	r25, Z+7	; 0x07
 634:	02 c0       	rjmp	.+4      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	9f ef       	ldi	r25, 0xFF	; 255
 63a:	2b 96       	adiw	r28, 0x0b	; 11
 63c:	e2 e1       	ldi	r30, 0x12	; 18
 63e:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__epilogue_restores__>

00000642 <strnlen_P>:
 642:	fc 01       	movw	r30, r24
 644:	05 90       	lpm	r0, Z+
 646:	61 50       	subi	r22, 0x01	; 1
 648:	70 40       	sbci	r23, 0x00	; 0
 64a:	01 10       	cpse	r0, r1
 64c:	d8 f7       	brcc	.-10     	; 0x644 <strnlen_P+0x2>
 64e:	80 95       	com	r24
 650:	90 95       	com	r25
 652:	8e 0f       	add	r24, r30
 654:	9f 1f       	adc	r25, r31
 656:	08 95       	ret

00000658 <strnlen>:
 658:	fc 01       	movw	r30, r24
 65a:	61 50       	subi	r22, 0x01	; 1
 65c:	70 40       	sbci	r23, 0x00	; 0
 65e:	01 90       	ld	r0, Z+
 660:	01 10       	cpse	r0, r1
 662:	d8 f7       	brcc	.-10     	; 0x65a <strnlen+0x2>
 664:	80 95       	com	r24
 666:	90 95       	com	r25
 668:	8e 0f       	add	r24, r30
 66a:	9f 1f       	adc	r25, r31
 66c:	08 95       	ret

0000066e <fputc>:
 66e:	0f 93       	push	r16
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	fb 01       	movw	r30, r22
 678:	23 81       	ldd	r18, Z+3	; 0x03
 67a:	21 fd       	sbrc	r18, 1
 67c:	03 c0       	rjmp	.+6      	; 0x684 <fputc+0x16>
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	9f ef       	ldi	r25, 0xFF	; 255
 682:	2c c0       	rjmp	.+88     	; 0x6dc <fputc+0x6e>
 684:	22 ff       	sbrs	r18, 2
 686:	16 c0       	rjmp	.+44     	; 0x6b4 <fputc+0x46>
 688:	46 81       	ldd	r20, Z+6	; 0x06
 68a:	57 81       	ldd	r21, Z+7	; 0x07
 68c:	24 81       	ldd	r18, Z+4	; 0x04
 68e:	35 81       	ldd	r19, Z+5	; 0x05
 690:	42 17       	cp	r20, r18
 692:	53 07       	cpc	r21, r19
 694:	44 f4       	brge	.+16     	; 0x6a6 <fputc+0x38>
 696:	a0 81       	ld	r26, Z
 698:	b1 81       	ldd	r27, Z+1	; 0x01
 69a:	9d 01       	movw	r18, r26
 69c:	2f 5f       	subi	r18, 0xFF	; 255
 69e:	3f 4f       	sbci	r19, 0xFF	; 255
 6a0:	31 83       	std	Z+1, r19	; 0x01
 6a2:	20 83       	st	Z, r18
 6a4:	8c 93       	st	X, r24
 6a6:	26 81       	ldd	r18, Z+6	; 0x06
 6a8:	37 81       	ldd	r19, Z+7	; 0x07
 6aa:	2f 5f       	subi	r18, 0xFF	; 255
 6ac:	3f 4f       	sbci	r19, 0xFF	; 255
 6ae:	37 83       	std	Z+7, r19	; 0x07
 6b0:	26 83       	std	Z+6, r18	; 0x06
 6b2:	14 c0       	rjmp	.+40     	; 0x6dc <fputc+0x6e>
 6b4:	8b 01       	movw	r16, r22
 6b6:	ec 01       	movw	r28, r24
 6b8:	fb 01       	movw	r30, r22
 6ba:	00 84       	ldd	r0, Z+8	; 0x08
 6bc:	f1 85       	ldd	r31, Z+9	; 0x09
 6be:	e0 2d       	mov	r30, r0
 6c0:	09 95       	icall
 6c2:	89 2b       	or	r24, r25
 6c4:	e1 f6       	brne	.-72     	; 0x67e <fputc+0x10>
 6c6:	d8 01       	movw	r26, r16
 6c8:	16 96       	adiw	r26, 0x06	; 6
 6ca:	8d 91       	ld	r24, X+
 6cc:	9c 91       	ld	r25, X
 6ce:	17 97       	sbiw	r26, 0x07	; 7
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	17 96       	adiw	r26, 0x07	; 7
 6d4:	9c 93       	st	X, r25
 6d6:	8e 93       	st	-X, r24
 6d8:	16 97       	sbiw	r26, 0x06	; 6
 6da:	ce 01       	movw	r24, r28
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	1f 91       	pop	r17
 6e2:	0f 91       	pop	r16
 6e4:	08 95       	ret

000006e6 <__ultoa_invert>:
 6e6:	fa 01       	movw	r30, r20
 6e8:	aa 27       	eor	r26, r26
 6ea:	28 30       	cpi	r18, 0x08	; 8
 6ec:	51 f1       	breq	.+84     	; 0x742 <__ultoa_invert+0x5c>
 6ee:	20 31       	cpi	r18, 0x10	; 16
 6f0:	81 f1       	breq	.+96     	; 0x752 <__ultoa_invert+0x6c>
 6f2:	e8 94       	clt
 6f4:	6f 93       	push	r22
 6f6:	6e 7f       	andi	r22, 0xFE	; 254
 6f8:	6e 5f       	subi	r22, 0xFE	; 254
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	8f 4f       	sbci	r24, 0xFF	; 255
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	af 4f       	sbci	r26, 0xFF	; 255
 702:	b1 e0       	ldi	r27, 0x01	; 1
 704:	3e d0       	rcall	.+124    	; 0x782 <__ultoa_invert+0x9c>
 706:	b4 e0       	ldi	r27, 0x04	; 4
 708:	3c d0       	rcall	.+120    	; 0x782 <__ultoa_invert+0x9c>
 70a:	67 0f       	add	r22, r23
 70c:	78 1f       	adc	r23, r24
 70e:	89 1f       	adc	r24, r25
 710:	9a 1f       	adc	r25, r26
 712:	a1 1d       	adc	r26, r1
 714:	68 0f       	add	r22, r24
 716:	79 1f       	adc	r23, r25
 718:	8a 1f       	adc	r24, r26
 71a:	91 1d       	adc	r25, r1
 71c:	a1 1d       	adc	r26, r1
 71e:	6a 0f       	add	r22, r26
 720:	71 1d       	adc	r23, r1
 722:	81 1d       	adc	r24, r1
 724:	91 1d       	adc	r25, r1
 726:	a1 1d       	adc	r26, r1
 728:	20 d0       	rcall	.+64     	; 0x76a <__ultoa_invert+0x84>
 72a:	09 f4       	brne	.+2      	; 0x72e <__ultoa_invert+0x48>
 72c:	68 94       	set
 72e:	3f 91       	pop	r19
 730:	2a e0       	ldi	r18, 0x0A	; 10
 732:	26 9f       	mul	r18, r22
 734:	11 24       	eor	r1, r1
 736:	30 19       	sub	r19, r0
 738:	30 5d       	subi	r19, 0xD0	; 208
 73a:	31 93       	st	Z+, r19
 73c:	de f6       	brtc	.-74     	; 0x6f4 <__ultoa_invert+0xe>
 73e:	cf 01       	movw	r24, r30
 740:	08 95       	ret
 742:	46 2f       	mov	r20, r22
 744:	47 70       	andi	r20, 0x07	; 7
 746:	40 5d       	subi	r20, 0xD0	; 208
 748:	41 93       	st	Z+, r20
 74a:	b3 e0       	ldi	r27, 0x03	; 3
 74c:	0f d0       	rcall	.+30     	; 0x76c <__ultoa_invert+0x86>
 74e:	c9 f7       	brne	.-14     	; 0x742 <__ultoa_invert+0x5c>
 750:	f6 cf       	rjmp	.-20     	; 0x73e <__ultoa_invert+0x58>
 752:	46 2f       	mov	r20, r22
 754:	4f 70       	andi	r20, 0x0F	; 15
 756:	40 5d       	subi	r20, 0xD0	; 208
 758:	4a 33       	cpi	r20, 0x3A	; 58
 75a:	18 f0       	brcs	.+6      	; 0x762 <__ultoa_invert+0x7c>
 75c:	49 5d       	subi	r20, 0xD9	; 217
 75e:	31 fd       	sbrc	r19, 1
 760:	40 52       	subi	r20, 0x20	; 32
 762:	41 93       	st	Z+, r20
 764:	02 d0       	rcall	.+4      	; 0x76a <__ultoa_invert+0x84>
 766:	a9 f7       	brne	.-22     	; 0x752 <__ultoa_invert+0x6c>
 768:	ea cf       	rjmp	.-44     	; 0x73e <__ultoa_invert+0x58>
 76a:	b4 e0       	ldi	r27, 0x04	; 4
 76c:	a6 95       	lsr	r26
 76e:	97 95       	ror	r25
 770:	87 95       	ror	r24
 772:	77 95       	ror	r23
 774:	67 95       	ror	r22
 776:	ba 95       	dec	r27
 778:	c9 f7       	brne	.-14     	; 0x76c <__ultoa_invert+0x86>
 77a:	00 97       	sbiw	r24, 0x00	; 0
 77c:	61 05       	cpc	r22, r1
 77e:	71 05       	cpc	r23, r1
 780:	08 95       	ret
 782:	9b 01       	movw	r18, r22
 784:	ac 01       	movw	r20, r24
 786:	0a 2e       	mov	r0, r26
 788:	06 94       	lsr	r0
 78a:	57 95       	ror	r21
 78c:	47 95       	ror	r20
 78e:	37 95       	ror	r19
 790:	27 95       	ror	r18
 792:	ba 95       	dec	r27
 794:	c9 f7       	brne	.-14     	; 0x788 <__ultoa_invert+0xa2>
 796:	62 0f       	add	r22, r18
 798:	73 1f       	adc	r23, r19
 79a:	84 1f       	adc	r24, r20
 79c:	95 1f       	adc	r25, r21
 79e:	a0 1d       	adc	r26, r0
 7a0:	08 95       	ret

000007a2 <__prologue_saves__>:
 7a2:	2f 92       	push	r2
 7a4:	3f 92       	push	r3
 7a6:	4f 92       	push	r4
 7a8:	5f 92       	push	r5
 7aa:	6f 92       	push	r6
 7ac:	7f 92       	push	r7
 7ae:	8f 92       	push	r8
 7b0:	9f 92       	push	r9
 7b2:	af 92       	push	r10
 7b4:	bf 92       	push	r11
 7b6:	cf 92       	push	r12
 7b8:	df 92       	push	r13
 7ba:	ef 92       	push	r14
 7bc:	ff 92       	push	r15
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
 7ca:	ca 1b       	sub	r28, r26
 7cc:	db 0b       	sbc	r29, r27
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	f8 94       	cli
 7d2:	de bf       	out	0x3e, r29	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	cd bf       	out	0x3d, r28	; 61
 7d8:	09 94       	ijmp

000007da <__epilogue_restores__>:
 7da:	2a 88       	ldd	r2, Y+18	; 0x12
 7dc:	39 88       	ldd	r3, Y+17	; 0x11
 7de:	48 88       	ldd	r4, Y+16	; 0x10
 7e0:	5f 84       	ldd	r5, Y+15	; 0x0f
 7e2:	6e 84       	ldd	r6, Y+14	; 0x0e
 7e4:	7d 84       	ldd	r7, Y+13	; 0x0d
 7e6:	8c 84       	ldd	r8, Y+12	; 0x0c
 7e8:	9b 84       	ldd	r9, Y+11	; 0x0b
 7ea:	aa 84       	ldd	r10, Y+10	; 0x0a
 7ec:	b9 84       	ldd	r11, Y+9	; 0x09
 7ee:	c8 84       	ldd	r12, Y+8	; 0x08
 7f0:	df 80       	ldd	r13, Y+7	; 0x07
 7f2:	ee 80       	ldd	r14, Y+6	; 0x06
 7f4:	fd 80       	ldd	r15, Y+5	; 0x05
 7f6:	0c 81       	ldd	r16, Y+4	; 0x04
 7f8:	1b 81       	ldd	r17, Y+3	; 0x03
 7fa:	aa 81       	ldd	r26, Y+2	; 0x02
 7fc:	b9 81       	ldd	r27, Y+1	; 0x01
 7fe:	ce 0f       	add	r28, r30
 800:	d1 1d       	adc	r29, r1
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	f8 94       	cli
 806:	de bf       	out	0x3e, r29	; 62
 808:	0f be       	out	0x3f, r0	; 63
 80a:	cd bf       	out	0x3d, r28	; 61
 80c:	ed 01       	movw	r28, r26
 80e:	08 95       	ret

00000810 <_exit>:
 810:	f8 94       	cli

00000812 <__stop_program>:
 812:	ff cf       	rjmp	.-2      	; 0x812 <__stop_program>
