
17_6 RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000028e  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c06  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  0000101e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000533  00000000  00000000  00001736  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003aa  00000000  00000000  00001d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b0  00000000  00000000  0000213e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000026ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  8a:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);			/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);			/* Command of first row and required position<16 */
	LCD_String(str);						/* Call LCD string function */
}
  92:	95 b3       	in	r25, 0x15	; 21
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	95 bb       	out	0x15, r25	; 21
  9e:	a8 98       	cbi	0x15, 0	; 21
  a0:	a9 9a       	sbi	0x15, 1	; 21
  a2:	35 e0       	ldi	r19, 0x05	; 5
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_Command+0x12>
  a8:	00 00       	nop
  aa:	a9 98       	cbi	0x15, 1	; 21
  ac:	ef e1       	ldi	r30, 0x1F	; 31
  ae:	f3 e0       	ldi	r31, 0x03	; 3
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_Command+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_Command+0x24>
  b6:	00 00       	nop
  b8:	25 b3       	in	r18, 0x15	; 21
  ba:	2f 70       	andi	r18, 0x0F	; 15
  bc:	f0 e1       	ldi	r31, 0x10	; 16
  be:	8f 9f       	mul	r24, r31
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	82 2b       	or	r24, r18
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	a9 9a       	sbi	0x15, 1	; 21
  ca:	35 e0       	ldi	r19, 0x05	; 5
  cc:	3a 95       	dec	r19
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Command+0x3a>
  d0:	00 00       	nop
  d2:	a9 98       	cbi	0x15, 1	; 21
  d4:	8f e3       	ldi	r24, 0x3F	; 63
  d6:	9f e1       	ldi	r25, 0x1F	; 31
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_Command+0x46>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_Command+0x4c>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <LCD_Char>:
  e2:	95 b3       	in	r25, 0x15	; 21
  e4:	9f 70       	andi	r25, 0x0F	; 15
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	95 bb       	out	0x15, r25	; 21
  ee:	a8 9a       	sbi	0x15, 0	; 21
  f0:	a9 9a       	sbi	0x15, 1	; 21
  f2:	35 e0       	ldi	r19, 0x05	; 5
  f4:	3a 95       	dec	r19
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_Char+0x12>
  f8:	00 00       	nop
  fa:	a9 98       	cbi	0x15, 1	; 21
  fc:	ef e1       	ldi	r30, 0x1F	; 31
  fe:	f3 e0       	ldi	r31, 0x03	; 3
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_Char+0x1e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_Char+0x24>
 106:	00 00       	nop
 108:	25 b3       	in	r18, 0x15	; 21
 10a:	2f 70       	andi	r18, 0x0F	; 15
 10c:	f0 e1       	ldi	r31, 0x10	; 16
 10e:	8f 9f       	mul	r24, r31
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	82 2b       	or	r24, r18
 116:	85 bb       	out	0x15, r24	; 21
 118:	a9 9a       	sbi	0x15, 1	; 21
 11a:	35 e0       	ldi	r19, 0x05	; 5
 11c:	3a 95       	dec	r19
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_Char+0x3a>
 120:	00 00       	nop
 122:	a9 98       	cbi	0x15, 1	; 21
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9f e1       	ldi	r25, 0x1F	; 31
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_Char+0x46>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_Char+0x4c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <LCD_Init>:
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	84 bb       	out	0x14, r24	; 20
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	89 ef       	ldi	r24, 0xF9	; 249
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <LCD_Init+0xa>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_Init+0x14>
 146:	00 00       	nop
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 14e:	88 e2       	ldi	r24, 0x28	; 40
 150:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 166:	8f e3       	ldi	r24, 0x3F	; 63
 168:	9f e1       	ldi	r25, 0x1F	; 31
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Init+0x38>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Init+0x3e>
 170:	00 00       	nop
 172:	08 95       	ret

00000174 <LCD_String>:
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
 17a:	88 81       	ld	r24, Y
 17c:	88 23       	and	r24, r24
 17e:	31 f0       	breq	.+12     	; 0x18c <LCD_String+0x18>
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_Char>
 186:	89 91       	ld	r24, Y+
 188:	81 11       	cpse	r24, r1
 18a:	fb cf       	rjmp	.-10     	; 0x182 <LCD_String+0xe>
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	8f e3       	ldi	r24, 0x3F	; 63
 19a:	9f e1       	ldi	r25, 0x1F	; 31
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_Clear+0xa>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_Clear+0x10>
 1a2:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1aa:	08 95       	ret

000001ac <UART_Init>:
	}
}

void UART_Init()
{
	UBRRL = 102;
 1ac:	86 e6       	ldi	r24, 0x66	; 102
 1ae:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
 1b0:	8a b1       	in	r24, 0x0a	; 10
 1b2:	88 69       	ori	r24, 0x98	; 152
 1b4:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
 1b6:	80 b5       	in	r24, 0x20	; 32
 1b8:	86 60       	ori	r24, 0x06	; 6
 1ba:	80 bd       	out	0x20, r24	; 32
 1bc:	08 95       	ret

000001be <main>:
void UART_Init(void);
char UART_Read(void);

int main(void)
{
	LCD_Init();
 1be:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Init>
	UART_Init();
 1c2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART_Init>
	LCD_Clear();
 1c6:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Clear>
	LCD_String("Data_IN");
 1ca:	80 e6       	ldi	r24, 0x60	; 96
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_String>
	
	sei();
 1d2:	78 94       	sei
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <main+0x16>

000001d6 <UART_Read>:
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0);
}

char UART_Read()
{
	while(bit_is_clear(UCSRA, RXC));
 1d6:	5f 9b       	sbis	0x0b, 7	; 11
 1d8:	fe cf       	rjmp	.-4      	; 0x1d6 <UART_Read>
	return UDR;
 1da:	8c b1       	in	r24, 0x0c	; 12
 1dc:	08 95       	ret

000001de <__vector_13>:
    {
    }
}

ISR(USART_RXC_vect)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
	if (count == 0)
 200:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 204:	81 11       	cpse	r24, r1
 206:	0d c0       	rjmp	.+26     	; 0x222 <__vector_13+0x44>
	{
		if (UART_Read() == '$')
 208:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Read>
 20c:	84 32       	cpi	r24, 0x24	; 36
 20e:	31 f4       	brne	.+12     	; 0x21c <__vector_13+0x3e>
		{
			count++;
 210:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 21a:	03 c0       	rjmp	.+6      	; 0x222 <__vector_13+0x44>
		} 
		else
		{
			count = 0;
 21c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 220:	23 c0       	rjmp	.+70     	; 0x268 <__vector_13+0x8a>
		}
	}
	if (count == 1)
 222:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	49 f4       	brne	.+18     	; 0x23c <__vector_13+0x5e>
	{
		data = UART_Read();
 22a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Read>
 22e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <data>
		count++;
 232:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
	}
	if (count == 2)
 23c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	91 f4       	brne	.+36     	; 0x268 <__vector_13+0x8a>
	{
		invdata = UART_Read();
 244:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Read>
 248:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <invdata>
		if ((data | invdata) == 0xFF)
 24c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <data>
 250:	89 2b       	or	r24, r25
 252:	8f 3f       	cpi	r24, 0xFF	; 255
 254:	39 f4       	brne	.+14     	; 0x264 <__vector_13+0x86>
		{
			LCD_Command(0xC0);
 256:	80 ec       	ldi	r24, 0xC0	; 192
 258:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
			LCD_Char(data);
 25c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <data>
 260:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_Char>
		}
	count = 0;
 264:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
	}
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
