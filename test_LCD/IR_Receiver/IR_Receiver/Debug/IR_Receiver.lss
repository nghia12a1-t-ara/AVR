
IR_Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  00000374  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e22  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086b  00000000  00000000  000012aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000610  00000000  00000000  00001b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000413  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a9  00000000  00000000  000026a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002d50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 36       	cpi	r26, 0x6E	; 110
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 20 01 	call	0x240	; 0x240 <main>
  74:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);			/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);			/* Command of first row and required position<16 */
	LCD_String(str);						/* Call LCD string function */
}
  7c:	95 b3       	in	r25, 0x15	; 21
  7e:	9f 70       	andi	r25, 0x0F	; 15
  80:	28 2f       	mov	r18, r24
  82:	20 7f       	andi	r18, 0xF0	; 240
  84:	92 2b       	or	r25, r18
  86:	95 bb       	out	0x15, r25	; 21
  88:	a8 98       	cbi	0x15, 0	; 21
  8a:	a9 9a       	sbi	0x15, 1	; 21
  8c:	35 e0       	ldi	r19, 0x05	; 5
  8e:	3a 95       	dec	r19
  90:	f1 f7       	brne	.-4      	; 0x8e <LCD_Command+0x12>
  92:	00 00       	nop
  94:	a9 98       	cbi	0x15, 1	; 21
  96:	ef e1       	ldi	r30, 0x1F	; 31
  98:	f3 e0       	ldi	r31, 0x03	; 3
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_Command+0x1e>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_Command+0x24>
  a0:	00 00       	nop
  a2:	25 b3       	in	r18, 0x15	; 21
  a4:	2f 70       	andi	r18, 0x0F	; 15
  a6:	f0 e1       	ldi	r31, 0x10	; 16
  a8:	8f 9f       	mul	r24, r31
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
  ae:	82 2b       	or	r24, r18
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	a9 9a       	sbi	0x15, 1	; 21
  b4:	35 e0       	ldi	r19, 0x05	; 5
  b6:	3a 95       	dec	r19
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_Command+0x3a>
  ba:	00 00       	nop
  bc:	a9 98       	cbi	0x15, 1	; 21
  be:	8f e3       	ldi	r24, 0x3F	; 63
  c0:	9f e1       	ldi	r25, 0x1F	; 31
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_Command+0x46>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_Command+0x4c>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <LCD_Char>:
  cc:	95 b3       	in	r25, 0x15	; 21
  ce:	9f 70       	andi	r25, 0x0F	; 15
  d0:	28 2f       	mov	r18, r24
  d2:	20 7f       	andi	r18, 0xF0	; 240
  d4:	92 2b       	or	r25, r18
  d6:	95 bb       	out	0x15, r25	; 21
  d8:	a8 9a       	sbi	0x15, 0	; 21
  da:	a9 9a       	sbi	0x15, 1	; 21
  dc:	35 e0       	ldi	r19, 0x05	; 5
  de:	3a 95       	dec	r19
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Char+0x12>
  e2:	00 00       	nop
  e4:	a9 98       	cbi	0x15, 1	; 21
  e6:	ef e1       	ldi	r30, 0x1F	; 31
  e8:	f3 e0       	ldi	r31, 0x03	; 3
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_Char+0x1e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_Char+0x24>
  f0:	00 00       	nop
  f2:	25 b3       	in	r18, 0x15	; 21
  f4:	2f 70       	andi	r18, 0x0F	; 15
  f6:	f0 e1       	ldi	r31, 0x10	; 16
  f8:	8f 9f       	mul	r24, r31
  fa:	c0 01       	movw	r24, r0
  fc:	11 24       	eor	r1, r1
  fe:	82 2b       	or	r24, r18
 100:	85 bb       	out	0x15, r24	; 21
 102:	a9 9a       	sbi	0x15, 1	; 21
 104:	35 e0       	ldi	r19, 0x05	; 5
 106:	3a 95       	dec	r19
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_Char+0x3a>
 10a:	00 00       	nop
 10c:	a9 98       	cbi	0x15, 1	; 21
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9f e1       	ldi	r25, 0x1F	; 31
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Char+0x46>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_Char+0x4c>
 118:	00 00       	nop
 11a:	08 95       	ret

0000011c <LCD_Init>:
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	84 bb       	out	0x14, r24	; 20
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	89 ef       	ldi	r24, 0xF9	; 249
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <LCD_Init+0xa>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Init+0x14>
 130:	00 00       	nop
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_Command>
 138:	88 e2       	ldi	r24, 0x28	; 40
 13a:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_Command>
 13e:	8c e0       	ldi	r24, 0x0C	; 12
 140:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_Command>
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_Command>
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_Command>
 150:	8f e3       	ldi	r24, 0x3F	; 63
 152:	9f e1       	ldi	r25, 0x1F	; 31
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Init+0x38>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Init+0x3e>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <LCD_String>:
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
 164:	88 81       	ld	r24, Y
 166:	88 23       	and	r24, r24
 168:	31 f0       	breq	.+12     	; 0x176 <LCD_String+0x18>
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Char>
 170:	89 91       	ld	r24, Y+
 172:	81 11       	cpse	r24, r1
 174:	fb cf       	rjmp	.-10     	; 0x16c <LCD_String+0xe>
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f e3       	ldi	r24, 0x3F	; 63
 184:	9f e1       	ldi	r25, 0x1F	; 31
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Clear+0xa>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_Clear+0x10>
 18c:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 18e:	80 e8       	ldi	r24, 0x80	; 128
 190:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_Command>
 194:	08 95       	ret

00000196 <__vector_13>:

char check,data,invdata,count=0;
char bufferdata[10];

ISR(USART_RXC_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	if(count == 0)
 1b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1bc:	81 11       	cpse	r24, r1
 1be:	0d c0       	rjmp	.+26     	; 0x1da <__vector_13+0x44>
	{
		if (UART_RxChar() == '$')/* Check special character '$' */
 1c0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <UART_RxChar>
 1c4:	84 97       	sbiw	r24, 0x24	; 36
 1c6:	31 f4       	brne	.+12     	; 0x1d4 <__vector_13+0x3e>
		count++;		/* If yes, increment count by 1 */
 1c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <__vector_13+0x44>
		
		else			/* Else count set to 0 */
		count=0;
 1d4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d8:	22 c0       	rjmp	.+68     	; 0x21e <__vector_13+0x88>
	}
	
	if (count == 1)
 1da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	49 f4       	brne	.+18     	; 0x1f4 <__vector_13+0x5e>
	{
		data = UART_RxChar();	/* Second character is data */
 1e2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <UART_RxChar>
 1e6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <data>
		count++;		/* Count increment by one */
 1ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
	if (count == 2)
 1f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	89 f4       	brne	.+34     	; 0x21e <__vector_13+0x88>
	{
		invdata = UART_RxChar();/* Third character is inverse data */
 1fc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <UART_RxChar>
 200:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <invdata>
		if ((data | invdata) == 0xFF)/* If data OR inverse data is 0xFF */
 204:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <data>
 208:	89 2b       	or	r24, r25
 20a:	8f 3f       	cpi	r24, 0xFF	; 255
 20c:	31 f4       	brne	.+12     	; 0x21a <__vector_13+0x84>
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
 20e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <bufferdata>
		{
			itoa(data, bufferdata, 0);
			LCD_String(bufferdata);	/* Display the data on LCD */
 212:	81 e6       	ldi	r24, 0x61	; 97
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_String>
		}
		count = 0;			/* Count set to zero */
 21a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <main>:

int main(void)
{
	LCD_Init();		/* Initialize the 16x2 LCD */
 240:	0e 94 8e 00 	call	0x11c	; 0x11c <LCD_Init>
	UART_Init(1200);	/* Set baud rate 1200 */
 244:	80 eb       	ldi	r24, 0xB0	; 176
 246:	94 e0       	ldi	r25, 0x04	; 4
 248:	0e 94 2a 01 	call	0x254	; 0x254 <UART_Init>
	LCD_Clear();		/* Clear the LCD */
 24c:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_Clear>
	sei();			/* Enable the global interrupt */
 250:	78 94       	sei
 252:	ff cf       	rjmp	.-2      	; 0x252 <main+0x12>

00000254 <UART_Init>:
	while (str[j]!=0)		/* Send string till null */
	{
		UART_TxChar(str[j]);
		j++;
	}
}
 254:	2a b1       	in	r18, 0x0a	; 10
 256:	28 61       	ori	r18, 0x18	; 24
 258:	2a b9       	out	0x0a, r18	; 10
 25a:	20 b5       	in	r18, 0x20	; 32
 25c:	26 68       	ori	r18, 0x86	; 134
 25e:	20 bd       	out	0x20, r18	; 32
 260:	dc 01       	movw	r26, r24
 262:	cb 01       	movw	r24, r22
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	aa 1f       	adc	r26, r26
 26a:	bb 1f       	adc	r27, r27
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	aa 1f       	adc	r26, r26
 272:	bb 1f       	adc	r27, r27
 274:	9c 01       	movw	r18, r24
 276:	ad 01       	movw	r20, r26
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	44 1f       	adc	r20, r20
 27e:	55 1f       	adc	r21, r21
 280:	22 0f       	add	r18, r18
 282:	33 1f       	adc	r19, r19
 284:	44 1f       	adc	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	74 e2       	ldi	r23, 0x24	; 36
 28c:	84 ef       	ldi	r24, 0xF4	; 244
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodsi4>
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	82 0f       	add	r24, r18
 298:	89 b9       	out	0x09, r24	; 9
 29a:	da 01       	movw	r26, r20
 29c:	c9 01       	movw	r24, r18
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	a1 09       	sbc	r26, r1
 2a2:	b1 09       	sbc	r27, r1
 2a4:	89 2f       	mov	r24, r25
 2a6:	9a 2f       	mov	r25, r26
 2a8:	ab 2f       	mov	r26, r27
 2aa:	bb 27       	eor	r27, r27
 2ac:	80 bd       	out	0x20, r24	; 32
 2ae:	08 95       	ret

000002b0 <UART_RxChar>:

unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
 2b0:	5f 9b       	sbis	0x0b, 7	; 11
 2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <UART_RxChar>
	return(UDR);			/* Return the byte*/
 2b4:	8c b1       	in	r24, 0x0c	; 12
 2b6:	08 95       	ret

000002b8 <__udivmodsi4>:
 2b8:	a1 e2       	ldi	r26, 0x21	; 33
 2ba:	1a 2e       	mov	r1, r26
 2bc:	aa 1b       	sub	r26, r26
 2be:	bb 1b       	sub	r27, r27
 2c0:	fd 01       	movw	r30, r26
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <__udivmodsi4_ep>

000002c4 <__udivmodsi4_loop>:
 2c4:	aa 1f       	adc	r26, r26
 2c6:	bb 1f       	adc	r27, r27
 2c8:	ee 1f       	adc	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	a2 17       	cp	r26, r18
 2ce:	b3 07       	cpc	r27, r19
 2d0:	e4 07       	cpc	r30, r20
 2d2:	f5 07       	cpc	r31, r21
 2d4:	20 f0       	brcs	.+8      	; 0x2de <__udivmodsi4_ep>
 2d6:	a2 1b       	sub	r26, r18
 2d8:	b3 0b       	sbc	r27, r19
 2da:	e4 0b       	sbc	r30, r20
 2dc:	f5 0b       	sbc	r31, r21

000002de <__udivmodsi4_ep>:
 2de:	66 1f       	adc	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	1a 94       	dec	r1
 2e8:	69 f7       	brne	.-38     	; 0x2c4 <__udivmodsi4_loop>
 2ea:	60 95       	com	r22
 2ec:	70 95       	com	r23
 2ee:	80 95       	com	r24
 2f0:	90 95       	com	r25
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	bd 01       	movw	r22, r26
 2f8:	cf 01       	movw	r24, r30
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
