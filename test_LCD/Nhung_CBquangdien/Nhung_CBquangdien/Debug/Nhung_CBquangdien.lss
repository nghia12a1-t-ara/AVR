
Nhung_CBquangdien.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000216  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b66  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e9  00000000  00000000  00000ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c5  00000000  00000000  000015c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b4  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e5  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000023e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  8a:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
#include "PORT_4.h"
#include "LCD_4.h"

void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);	/* sending upper nibble */
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	9b bb       	out	0x1b, r25	; 27
	LCD_Port &= ~ (1<<RS);							/* RS=0, command reg. */
  9e:	d8 98       	cbi	0x1b, 0	; 27
	LCD_Port |= (1<<EN);							/* Enable pulse */
  a0:	d9 9a       	sbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	35 e0       	ldi	r19, 0x05	; 5
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_Command+0x12>
  a8:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  aa:	d9 98       	cbi	0x1b, 1	; 27
  ac:	ef e1       	ldi	r30, 0x1F	; 31
  ae:	f3 e0       	ldi	r31, 0x03	; 3
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_Command+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_Command+0x24>
  b6:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);		/* sending lower nibble */
  b8:	2b b3       	in	r18, 0x1b	; 27
  ba:	2f 70       	andi	r18, 0x0F	; 15
  bc:	f0 e1       	ldi	r31, 0x10	; 16
  be:	8f 9f       	mul	r24, r31
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	82 2b       	or	r24, r18
  c6:	8b bb       	out	0x1b, r24	; 27
	LCD_Port |= (1<<EN);
  c8:	d9 9a       	sbi	0x1b, 1	; 27
  ca:	35 e0       	ldi	r19, 0x05	; 5
  cc:	3a 95       	dec	r19
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Command+0x3a>
  d0:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  d2:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e3       	ldi	r24, 0x3F	; 63
  d6:	9f e1       	ldi	r25, 0x1F	; 31
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_Command+0x46>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_Command+0x4c>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <LCD_Char>:
	_delay_ms(2);
}

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);	/* sending upper nibble */
  e2:	9b b3       	in	r25, 0x1b	; 27
  e4:	9f 70       	andi	r25, 0x0F	; 15
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	92 2b       	or	r25, r18
  ec:	9b bb       	out	0x1b, r25	; 27
	LCD_Port |= (1<<RS);							/* RS=1, data reg. */
  ee:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_Port|= (1<<EN);
  f0:	d9 9a       	sbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	35 e0       	ldi	r19, 0x05	; 5
  f4:	3a 95       	dec	r19
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_Char+0x12>
  f8:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  fa:	d9 98       	cbi	0x1b, 1	; 27
  fc:	ef e1       	ldi	r30, 0x1F	; 31
  fe:	f3 e0       	ldi	r31, 0x03	; 3
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_Char+0x1e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_Char+0x24>
 106:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);		/* sending lower nibble */
 108:	2b b3       	in	r18, 0x1b	; 27
 10a:	2f 70       	andi	r18, 0x0F	; 15
 10c:	f0 e1       	ldi	r31, 0x10	; 16
 10e:	8f 9f       	mul	r24, r31
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	82 2b       	or	r24, r18
 116:	8b bb       	out	0x1b, r24	; 27
	LCD_Port |= (1<<EN);
 118:	d9 9a       	sbi	0x1b, 1	; 27
 11a:	35 e0       	ldi	r19, 0x05	; 5
 11c:	3a 95       	dec	r19
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_Char+0x3a>
 120:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 122:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9f e1       	ldi	r25, 0x1F	; 31
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_Char+0x46>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_Char+0x4c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a bb       	out	0x1a, r24	; 26
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	89 ef       	ldi	r24, 0xF9	; 249
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <LCD_Init+0xa>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_Init+0x14>
 146:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 14e:	88 e2       	ldi	r24, 0x28	; 40
 150:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 166:	8f e3       	ldi	r24, 0x3F	; 63
 168:	9f e1       	ldi	r25, 0x1F	; 31
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Init+0x38>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Init+0x3e>
 170:	00 00       	nop
 172:	08 95       	ret

00000174 <LCD_String>:
	_delay_ms(2);
}

void LCD_String (char *str)		/* Send string to LCD function */
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 17a:	88 81       	ld	r24, Y
 17c:	88 23       	and	r24, r24
 17e:	31 f0       	breq	.+12     	; 0x18c <LCD_String+0x18>
 180:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);
 182:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_Char>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 186:	89 91       	ld	r24, Y+
 188:	81 11       	cpse	r24, r1
 18a:	fb cf       	rjmp	.-10     	; 0x182 <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)		/* Send string to LCD with xy position */
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 198:	81 11       	cpse	r24, r1
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <LCD_String_xy+0x1a>
 19c:	60 31       	cpi	r22, 0x10	; 16
 19e:	78 f4       	brcc	.+30     	; 0x1be <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);			/* Command of first row and required position<16 */
 1a0:	86 2f       	mov	r24, r22
 1a2:	8f 70       	andi	r24, 0x0F	; 15
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1aa:	09 c0       	rjmp	.+18     	; 0x1be <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	39 f4       	brne	.+14     	; 0x1be <LCD_String_xy+0x2c>
 1b0:	60 31       	cpi	r22, 0x10	; 16
 1b2:	28 f4       	brcc	.+10     	; 0x1be <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);			/* Command of first row and required position<16 */
 1b4:	86 2f       	mov	r24, r22
 1b6:	8f 70       	andi	r24, 0x0F	; 15
 1b8:	80 6c       	ori	r24, 0xC0	; 192
 1ba:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_String(str);						/* Call LCD string function */
 1be:	ce 01       	movw	r24, r28
 1c0:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_String>
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <Timer_pwm_init>:
// 	LCD_String_xy(1, 0, buffer);
// }

void Timer_pwm_init(void)
{
	TCCR1A |= (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
 1ca:	8f b5       	in	r24, 0x2f	; 47
 1cc:	82 6a       	ori	r24, 0xA2	; 162
 1ce:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS10);  // chia 1
 1d0:	8e b5       	in	r24, 0x2e	; 46
 1d2:	89 61       	ori	r24, 0x19	; 25
 1d4:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 420;
 1d6:	84 ea       	ldi	r24, 0xA4	; 164
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	97 bd       	out	0x27, r25	; 39
 1dc:	86 bd       	out	0x26, r24	; 38
	OCR1B = 140;
 1de:	8c e8       	ldi	r24, 0x8C	; 140
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	99 bd       	out	0x29, r25	; 41
 1e4:	88 bd       	out	0x28, r24	; 40
 1e6:	08 95       	ret

000001e8 <main>:
int count = -1;
char buffer[10];

int main(void)
{
	DDRD |= (1 << IR_Out_Pin);
 1e8:	8c 9a       	sbi	0x11, 4	; 17
	DDRD &= ~(1 << 2);
 1ea:	8a 98       	cbi	0x11, 2	; 17
	PORTD &= ~(1 << 2);
 1ec:	92 98       	cbi	0x12, 2	; 18
	
 	LCD_Init();
 1ee:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Init>
	Timer_pwm_init();
 1f2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Timer_pwm_init>
	GICR |= (1 << INT0);		/* Enable INT0*/
 1f6:	8b b7       	in	r24, 0x3b	; 59
 1f8:	80 64       	ori	r24, 0x40	; 64
 1fa:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC01) | (1 << ISC00);  /* Trigger INT0 on rising edge */
 1fc:	85 b7       	in	r24, 0x35	; 53
 1fe:	83 60       	ori	r24, 0x03	; 3
 200:	85 bf       	out	0x35, r24	; 53
	
	sei();
 202:	78 94       	sei
	
	LCD_String_xy(0, 0, "Tong San Pham:");
 204:	40 e6       	ldi	r20, 0x60	; 96
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_String_xy>
 210:	ff cf       	rjmp	.-2      	; 0x210 <main+0x28>

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
