
NOKIA5110.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f0  00800060  000001e2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b7  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a4  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ed  00000000  00000000  0000158f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cd  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000383  00000000  00000000  00001f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 35       	cpi	r26, 0x50	; 80
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  7a:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SPI_SS_Enable>:
char SPI_Read()
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
	return(SPDR);													/* Return the SPDR value */
}
  82:	c4 98       	cbi	0x18, 4	; 24
  84:	08 95       	ret

00000086 <SPI_SS_Disable>:
  86:	c4 9a       	sbi	0x18, 4	; 24
  88:	08 95       	ret

0000008a <SPI_Init>:
  8a:	83 eb       	ldi	r24, 0xB3	; 179
  8c:	87 bb       	out	0x17, r24	; 23
  8e:	c0 9a       	sbi	0x18, 0	; 24
  90:	be 98       	cbi	0x17, 6	; 23
  92:	c4 9a       	sbi	0x18, 4	; 24
  94:	81 e5       	ldi	r24, 0x51	; 81
  96:	8d b9       	out	0x0d, r24	; 13
  98:	08 95       	ret

0000009a <SPI_Write>:

void SPI_Write(char write_data)										
{
	SPDR = write_data;													
  9a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
  9c:	77 9b       	sbis	0x0e, 7	; 14
  9e:	fe cf       	rjmp	.-4      	; 0x9c <SPI_Write+0x2>
}
  a0:	08 95       	ret

000000a2 <N5110_Cmnd>:
	while(1)
	return 0;
}

void N5110_Cmnd(char DATA)
{
  a2:	cf 93       	push	r28
  a4:	c8 2f       	mov	r28, r24
	PORTB &= ~(1<<DC);	/* make DC pin to logic zero for command operation */
  a6:	c1 98       	cbi	0x18, 1	; 24
	SPI_SS_Enable();	/* enable SS pin to slave selection */
  a8:	0e 94 41 00 	call	0x82	; 0x82 <SPI_SS_Enable>
	SPI_Write(DATA);	/* send data on data register */
  ac:	8c 2f       	mov	r24, r28
  ae:	0e 94 4d 00 	call	0x9a	; 0x9a <SPI_Write>
	PORTB |= (1<<DC);	/* make DC pin to logic high for data operation */
  b2:	c1 9a       	sbi	0x18, 1	; 24
	SPI_SS_Disable();
  b4:	0e 94 43 00 	call	0x86	; 0x86 <SPI_SS_Disable>
}
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <N5110_Data>:
	N5110_Cmnd(0x20);  /* command set in basic mode */
	N5110_Cmnd(0x0C);  /* display result in normal mode */
}

void N5110_Data(char *DATA)
{
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	8c 01       	movw	r16, r24
	PORTB |= (1<<DC);	/* Set DC pin for data operation */
  ca:	c1 9a       	sbi	0x18, 1	; 24
	SPI_SS_Enable();	/* Enable SS pin to slave selection */
  cc:	0e 94 41 00 	call	0x82	; 0x82 <SPI_SS_Enable>
	int lenan = strlen(DATA);/* Measure the length of data */
  d0:	f8 01       	movw	r30, r16
  d2:	01 90       	ld	r0, Z+
  d4:	00 20       	and	r0, r0
  d6:	e9 f7       	brne	.-6      	; 0xd2 <N5110_Data+0x16>
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	e0 1b       	sub	r30, r16
  dc:	f1 0b       	sbc	r31, r17
	for (int g = 0; g < lenan; g++)
  de:	1e 16       	cp	r1, r30
  e0:	1f 06       	cpc	r1, r31
  e2:	3c f5       	brge	.+78     	; 0x132 <N5110_Data+0x76>
  e4:	e8 01       	movw	r28, r16
  e6:	0e 0f       	add	r16, r30
  e8:	1f 1f       	adc	r17, r31
  ea:	20 c0       	rjmp	.+64     	; 0x12c <N5110_Data+0x70>
	{
		for (int index=0; index<5; index++)
		{
			SPI_Write(ASCII[DATA[g] - 0x20][index]);/* Send the data on data register */
  ec:	28 81       	ld	r18, Y
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	20 52       	subi	r18, 0x20	; 32
  f2:	31 09       	sbc	r19, r1
  f4:	f9 01       	movw	r30, r18
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	e2 0f       	add	r30, r18
 100:	f3 1f       	adc	r31, r19
 102:	e0 59       	subi	r30, 0x90	; 144
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	ee 0d       	add	r30, r14
 108:	ff 1d       	adc	r31, r15
 10a:	80 81       	ld	r24, Z
 10c:	0e 94 4d 00 	call	0x9a	; 0x9a <SPI_Write>
	PORTB |= (1<<DC);	/* Set DC pin for data operation */
	SPI_SS_Enable();	/* Enable SS pin to slave selection */
	int lenan = strlen(DATA);/* Measure the length of data */
	for (int g = 0; g < lenan; g++)
	{
		for (int index=0; index<5; index++)
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	e8 1a       	sub	r14, r24
 114:	f8 0a       	sbc	r15, r24
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	e8 16       	cp	r14, r24
 11a:	f1 04       	cpc	r15, r1
 11c:	39 f7       	brne	.-50     	; 0xec <N5110_Data+0x30>
		{
			SPI_Write(ASCII[DATA[g] - 0x20][index]);/* Send the data on data register */
		}
		SPI_Write(0x00);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 4d 00 	call	0x9a	; 0x9a <SPI_Write>
 124:	21 96       	adiw	r28, 0x01	; 1
void N5110_Data(char *DATA)
{
	PORTB |= (1<<DC);	/* Set DC pin for data operation */
	SPI_SS_Enable();	/* Enable SS pin to slave selection */
	int lenan = strlen(DATA);/* Measure the length of data */
	for (int g = 0; g < lenan; g++)
 126:	0c 17       	cp	r16, r28
 128:	1d 07       	cpc	r17, r29
 12a:	19 f0       	breq	.+6      	; 0x132 <N5110_Data+0x76>
	N5110_Cmnd(0x20);  /* command set in basic mode */
	N5110_Cmnd(0x0C);  /* display result in normal mode */
}

void N5110_Data(char *DATA)
{
 12c:	e1 2c       	mov	r14, r1
 12e:	f1 2c       	mov	r15, r1
 130:	dd cf       	rjmp	.-70     	; 0xec <N5110_Data+0x30>
		{
			SPI_Write(ASCII[DATA[g] - 0x20][index]);/* Send the data on data register */
		}
		SPI_Write(0x00);
	}
	SPI_SS_Disable();
 132:	0e 94 43 00 	call	0x86	; 0x86 <SPI_SS_Disable>
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	08 95       	ret

00000144 <N5110_Reset>:


void N5110_Reset()  /* reset the Display at the beginning of initialization */
{
	PORTB &= ~(1<<RST);
 144:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	81 ee       	ldi	r24, 0xE1	; 225
 14a:	94 e0       	ldi	r25, 0x04	; 4
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <N5110_Reset+0x8>
 154:	00 c0       	rjmp	.+0      	; 0x156 <N5110_Reset+0x12>
 156:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<RST);
 158:	c0 9a       	sbi	0x18, 0	; 24
 15a:	08 95       	ret

0000015c <N5110_init>:
	SPI_SS_Disable();
}

void N5110_init()
{
	N5110_Reset();  /* reset the display */
 15c:	0e 94 a2 00 	call	0x144	; 0x144 <N5110_Reset>
	N5110_Cmnd(0x21);  /* command set in addition mode */
 160:	81 e2       	ldi	r24, 0x21	; 33
 162:	0e 94 51 00 	call	0xa2	; 0xa2 <N5110_Cmnd>
	N5110_Cmnd(0xC0);  /* set the voltage by sending C0 means VOP = 5V */
 166:	80 ec       	ldi	r24, 0xC0	; 192
 168:	0e 94 51 00 	call	0xa2	; 0xa2 <N5110_Cmnd>
	N5110_Cmnd(0x07);  /* set the temp. coefficient to 3 */
 16c:	87 e0       	ldi	r24, 0x07	; 7
 16e:	0e 94 51 00 	call	0xa2	; 0xa2 <N5110_Cmnd>
	N5110_Cmnd(0x13);  /* set value of Voltage Bias System */
 172:	83 e1       	ldi	r24, 0x13	; 19
 174:	0e 94 51 00 	call	0xa2	; 0xa2 <N5110_Cmnd>
	N5110_Cmnd(0x20);  /* command set in basic mode */
 178:	80 e2       	ldi	r24, 0x20	; 32
 17a:	0e 94 51 00 	call	0xa2	; 0xa2 <N5110_Cmnd>
	N5110_Cmnd(0x0C);  /* display result in normal mode */
 17e:	8c e0       	ldi	r24, 0x0C	; 12
 180:	0e 94 51 00 	call	0xa2	; 0xa2 <N5110_Cmnd>
 184:	08 95       	ret

00000186 <lcd_setXY>:
	_delay_ms(100);
	PORTB |= (1<<RST);
}

void lcd_setXY(char x, char y)  /* set the column and row */
{
 186:	cf 93       	push	r28
 188:	c6 2f       	mov	r28, r22
	N5110_Cmnd(x);
 18a:	0e 94 51 00 	call	0xa2	; 0xa2 <N5110_Cmnd>
	N5110_Cmnd(y);
 18e:	8c 2f       	mov	r24, r28
 190:	0e 94 51 00 	call	0xa2	; 0xa2 <N5110_Cmnd>
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <N5110_clear>:

void N5110_clear()  /* clear the Display */
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
	SPI_SS_Enable();
 19c:	0e 94 41 00 	call	0x82	; 0x82 <SPI_SS_Enable>
	PORTB |= (1<<DC);
 1a0:	c1 9a       	sbi	0x18, 1	; 24
 1a2:	c8 ef       	ldi	r28, 0xF8	; 248
 1a4:	d1 e0       	ldi	r29, 0x01	; 1
	for (int k=0; k<=503; k++)
	{
		SPI_Write(0x00);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 4d 00 	call	0x9a	; 0x9a <SPI_Write>
 1ac:	21 97       	sbiw	r28, 0x01	; 1

void N5110_clear()  /* clear the Display */
{
	SPI_SS_Enable();
	PORTB |= (1<<DC);
	for (int k=0; k<=503; k++)
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <N5110_clear+0xe>
	{
		SPI_Write(0x00);
	}
	PORTB &= ~(1<<DC);
 1b0:	c1 98       	cbi	0x18, 1	; 24
	SPI_SS_Disable();
 1b2:	0e 94 43 00 	call	0x86	; 0x86 <SPI_SS_Disable>
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <main>:
void lcd_setXY(char, char);
void N5110_image(const unsigned char*);

int main()
{
	SPI_Init();
 1bc:	0e 94 45 00 	call	0x8a	; 0x8a <SPI_Init>
	N5110_init();
 1c0:	0e 94 ae 00 	call	0x15c	; 0x15c <N5110_init>
	N5110_clear();
 1c4:	0e 94 cc 00 	call	0x198	; 0x198 <N5110_clear>
	lcd_setXY(0x40,0x80);
 1c8:	60 e8       	ldi	r22, 0x80	; 128
 1ca:	80 e4       	ldi	r24, 0x40	; 64
 1cc:	0e 94 c3 00 	call	0x186	; 0x186 <lcd_setXY>
	N5110_Data("ElectronicWings");
 1d0:	80 e6       	ldi	r24, 0x60	; 96
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 5e 00 	call	0xbc	; 0xbc <N5110_Data>
	while(1)
	return 0;
}
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	08 95       	ret

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
