
Atmega16_UART_ECHO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000180  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000680  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ac  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026c  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000321  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e0  00000000  00000000  000014d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  7a:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_init>:
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)


void UART_init(long USART_BAUDRATE)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);   /* Turn on the transmission and reception */
  82:	2a b1       	in	r18, 0x0a	; 10
  84:	28 61       	ori	r18, 0x18	; 24
  86:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); /* Use 8-bit character sizes */
  88:	20 b5       	in	r18, 0x20	; 32
  8a:	26 68       	ori	r18, 0x86	; 134
  8c:	20 bd       	out	0x20, r18	; 32

	UBRRL = BAUD_PRESCALE; 					/* Load lower 8-bits of the baud rate value */
  8e:	dc 01       	movw	r26, r24
  90:	cb 01       	movw	r24, r22
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	aa 1f       	adc	r26, r26
  98:	bb 1f       	adc	r27, r27
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	aa 1f       	adc	r26, r26
  a0:	bb 1f       	adc	r27, r27
  a2:	9c 01       	movw	r18, r24
  a4:	ad 01       	movw	r20, r26
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	44 1f       	adc	r20, r20
  ac:	55 1f       	adc	r21, r21
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	44 1f       	adc	r20, r20
  b4:	55 1f       	adc	r21, r21
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	72 e1       	ldi	r23, 0x12	; 18
  ba:	8a e7       	ldi	r24, 0x7A	; 122
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 9c 00 	call	0x138	; 0x138 <__udivmodsi4>
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	82 0f       	add	r24, r18
  c6:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);			/*Load upper 8-bits*/
  c8:	da 01       	movw	r26, r20
  ca:	c9 01       	movw	r24, r18
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	a1 09       	sbc	r26, r1
  d0:	b1 09       	sbc	r27, r1
  d2:	89 2f       	mov	r24, r25
  d4:	9a 2f       	mov	r25, r26
  d6:	ab 2f       	mov	r26, r27
  d8:	bb 27       	eor	r27, r27
  da:	80 bd       	out	0x20, r24	; 32
  dc:	08 95       	ret

000000de <UART_RxChar>:
}

unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0); /*Do nothing until data have been received*/
  de:	5f 9b       	sbis	0x0b, 7	; 11
  e0:	fe cf       	rjmp	.-4      	; 0xde <UART_RxChar>
	return(UDR);				/* return the byte*/
  e2:	8c b1       	in	r24, 0x0c	; 12
}
  e4:	08 95       	ret

000000e6 <UART_TxChar>:

void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE))); /*Wait for empty transmit buffer*/
  e6:	5d 9b       	sbis	0x0b, 5	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <UART_TxChar>
	UDR = ch ;
  ea:	8c b9       	out	0x0c, r24	; 12
  ec:	08 95       	ret

000000ee <UART_SendString>:
}

void UART_SendString(char *str)
{
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	fc 01       	movw	r30, r24
	unsigned char j=0;
	
	while (str[j]!=0)	/*send string up to null */
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	59 f0       	breq	.+22     	; 0x112 <UART_SendString+0x24>
  fc:	8f 01       	movw	r16, r30
  fe:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_TxChar(str[j]);	
 100:	0e 94 73 00 	call	0xe6	; 0xe6 <UART_TxChar>
		j++;
 104:	cf 5f       	subi	r28, 0xFF	; 255

void UART_SendString(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)	/*send string up to null */
 106:	f8 01       	movw	r30, r16
 108:	ec 0f       	add	r30, r28
 10a:	f1 1d       	adc	r31, r1
 10c:	80 81       	ld	r24, Z
 10e:	81 11       	cpse	r24, r1
 110:	f7 cf       	rjmp	.-18     	; 0x100 <UART_SendString+0x12>
	{
		UART_TxChar(str[j]);	
		j++;
	}
}
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	08 95       	ret

0000011a <main>:

int main()
{
	char c;
	UART_init(9600);
 11a:	60 e8       	ldi	r22, 0x80	; 128
 11c:	75 e2       	ldi	r23, 0x25	; 37
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 41 00 	call	0x82	; 0x82 <UART_init>
	
	UART_SendString("EchoTest");	
 126:	80 e6       	ldi	r24, 0x60	; 96
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 77 00 	call	0xee	; 0xee <UART_SendString>
	while(1)
	{
		c=UART_RxChar();
 12e:	0e 94 6f 00 	call	0xde	; 0xde <UART_RxChar>
		UART_TxChar(c);
 132:	0e 94 73 00 	call	0xe6	; 0xe6 <UART_TxChar>
 136:	fb cf       	rjmp	.-10     	; 0x12e <main+0x14>

00000138 <__udivmodsi4>:
 138:	a1 e2       	ldi	r26, 0x21	; 33
 13a:	1a 2e       	mov	r1, r26
 13c:	aa 1b       	sub	r26, r26
 13e:	bb 1b       	sub	r27, r27
 140:	fd 01       	movw	r30, r26
 142:	0d c0       	rjmp	.+26     	; 0x15e <__udivmodsi4_ep>

00000144 <__udivmodsi4_loop>:
 144:	aa 1f       	adc	r26, r26
 146:	bb 1f       	adc	r27, r27
 148:	ee 1f       	adc	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	a2 17       	cp	r26, r18
 14e:	b3 07       	cpc	r27, r19
 150:	e4 07       	cpc	r30, r20
 152:	f5 07       	cpc	r31, r21
 154:	20 f0       	brcs	.+8      	; 0x15e <__udivmodsi4_ep>
 156:	a2 1b       	sub	r26, r18
 158:	b3 0b       	sbc	r27, r19
 15a:	e4 0b       	sbc	r30, r20
 15c:	f5 0b       	sbc	r31, r21

0000015e <__udivmodsi4_ep>:
 15e:	66 1f       	adc	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	88 1f       	adc	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	1a 94       	dec	r1
 168:	69 f7       	brne	.-38     	; 0x144 <__udivmodsi4_loop>
 16a:	60 95       	com	r22
 16c:	70 95       	com	r23
 16e:	80 95       	com	r24
 170:	90 95       	com	r25
 172:	9b 01       	movw	r18, r22
 174:	ac 01       	movw	r20, r24
 176:	bd 01       	movw	r22, r26
 178:	cf 01       	movw	r24, r30
 17a:	08 95       	ret

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
